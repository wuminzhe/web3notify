{
  "magic_number": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 1,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 2,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U8"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": [

                      ]
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 4,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U32"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "darwinia_common_runtime",
                "impls",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "free_kton",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved_kton",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 6,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U128"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 8,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U64"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; /*«*/ 32 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 10,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 12,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 14,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 15,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 16
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 143,
                      "typeName": "Phase",
                      "docs": [

                      ]
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 104,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "darwinia_runtime",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "darwinia_balances::Event<Runtime, darwinia_balances::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kton",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "darwinia_balances::Event<Runtime, darwinia_balances::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": 28,
                          "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "darwinia_staking::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Offences",
                      "fields": [
                        {
                          "name": null,
                          "type": 33,
                          "typeName": "pallet_offences::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "pallet_session::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 36,
                          "typeName": "pallet_grandpa::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "pallet_im_online::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaRelayAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 50,
                          "typeName": "darwinia_relay_authority::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 56,
                          "typeName": "darwinia_ecdsa_authority::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 51,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "pallet_democracy::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 74,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KtonTreasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 76,
                          "typeName": "pallet_treasury::Event<Runtime, pallet_treasury::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 77,
                          "typeName": "pallet_tips::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 78,
                          "typeName": "pallet_bounties::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 79,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 80,
                          "typeName": "pallet_vesting::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 81,
                          "typeName": "pallet_utility::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 82,
                          "typeName": "pallet_identity::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Society",
                      "fields": [
                        {
                          "name": null,
                          "type": 83,
                          "typeName": "pallet_society::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "pallet_recovery::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 85,
                          "typeName": "pallet_scheduler::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 88,
                          "typeName": "pallet_proxy::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 91,
                          "typeName": "pallet_multisig::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EthereumRelay",
                      "fields": [
                        {
                          "name": null,
                          "type": 93,
                          "typeName": "darwinia_bridge_ethereum::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EthereumBacking",
                      "fields": [
                        {
                          "name": null,
                          "type": 110,
                          "typeName": "to_ethereum_backing::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeCrabDispatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 112,
                          "typeName": "pallet_bridge_dispatch::Event<Runtime, pallet_bridge_dispatch::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeCrabMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 117,
                          "typeName": "pallet_bridge_messages::Event<Runtime, pallet_bridge_messages::Instance1\n>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "pallet_fee_market::Event<Runtime, pallet_fee_market::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ToCrabBacking",
                      "fields": [
                        {
                          "name": null,
                          "type": 129,
                          "typeName": "to_substrate_backing::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 131,
                          "typeName": "darwinia_evm::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 133,
                          "typeName": "darwinia_ethereum::Event<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 141,
                          "typeName": "pallet_base_fee::Event",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 49,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": null,
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully. \\[info\\]"
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed. \\[error, info\\]"
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new \\[account\\] was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An \\[account\\] was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened. \\[origin, remark_hash\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass",
                      "docs": [

                      ]
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Operational",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mandatory",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "No",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": "index",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        },
                        {
                          "name": "error",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoProviders",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": "TokenError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "ArithmeticError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsupported",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Overflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination_status",
                          "type": 26,
                          "typeName": "BalanceStatus",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited into the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "destination_status",
                          "type": 26,
                          "typeName": "BalanceStatus",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited into the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SolutionStored",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": 29,
                          "typeName": "ElectionCompute",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prev_ejected",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A solution was stored with the given compute.",
                        "",
                        "If the solution is signed, this means that it hasn't yet been processed. If the",
                        "solution is unsigned, this means that it has also been processed.",
                        "",
                        "The `bool` is `true` when a previous solution was ejected to make room for this one."
                      ]
                    },
                    {
                      "name": "ElectionFinalized",
                      "fields": [
                        {
                          "name": "election_compute",
                          "type": 31,
                          "typeName": "Option<ElectionCompute>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The election has been finalized, with `Some` of the given computation, or else if the",
                        "election failed, `None`."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account has been rewarded for their signed submission being finalized."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An account has been slashed for submitting an invalid signed submission."
                      ]
                    },
                    {
                      "name": "SignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The signed phase of the given round has started."
                      ]
                    },
                    {
                      "name": "UnsignedPhaseStarted",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The unsigned phase of the given round has started."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OnChain",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsigned",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fallback",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Emergency",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "Bool"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 29
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 29,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EraPaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The era payout has been set; the first balance is the validator-payout; the second is",
                        "the remainder from the maximum amount of reward.",
                        "\\[era_index, validator_payout, remainder\\]"
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The nominator has been rewarded by this amount. \\[stash, amount\\]"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "One validator (and its nominators) has been slashed by the given amount.",
                        "\\[validator, amount, amount\\]"
                      ]
                    },
                    {
                      "name": "OldSlashingReportDiscarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An old slashing report from a prior era was discarded because it could",
                        "not be processed. \\[session_index\\]"
                      ]
                    },
                    {
                      "name": "StakersElected",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "A new set of stakers was elected."
                      ]
                    },
                    {
                      "name": "RingBonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An account has bonded this amount. \\[amount, start, end\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "KtonBonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An account has bonded this amount. \\[account, amount, start, end\\]",
                        "",
                        "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                        "it will not be emitted for staking rewards when they are added to stake."
                      ]
                    },
                    {
                      "name": "RingUnbonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An account has unbonded this amount. \\[amount\\]"
                      ]
                    },
                    {
                      "name": "KtonUnbonded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has unbonded this amount. \\[account, amount\\]"
                      ]
                    },
                    {
                      "name": "Kicked",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A nominator has been kicked from a validator. \\[nominator, stash\\]"
                      ]
                    },
                    {
                      "name": "StakingElectionFailed",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The election failed. No new era is planned."
                      ]
                    },
                    {
                      "name": "Chilled",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "An account has stopped participating as either a validator or nominator.",
                        "\\[stash\\]"
                      ]
                    },
                    {
                      "name": "PayoutStarted",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
                      ]
                    },
                    {
                      "name": "DepositsClaimed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Someone claimed his deposits. \\[stash\\]"
                      ]
                    },
                    {
                      "name": "DepositsClaimedWithPunish",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Someone claimed his deposits with some *KTON*s punishment. \\[stash, forfeit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_offences",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "name": "kind",
                          "type": 34,
                          "typeName": "Kind",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timeslot",
                          "type": 10,
                          "typeName": "OpaqueTimeSlot",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 37,
                          "typeName": "AuthorityList",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 38
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 38,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  39,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 40,
                      "typeName": "/*«*/ ed25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HeartbeatReceived",
                      "fields": [
                        {
                          "name": "authority_id",
                          "type": 42,
                          "typeName": "T::AuthorityId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new heartbeat was received from `AuthorityId`."
                      ]
                    },
                    {
                      "name": "AllGood",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "At the end of the session, no offence was committed."
                      ]
                    },
                    {
                      "name": "SomeOffline",
                      "fields": [
                        {
                          "name": "offline",
                          "type": 44,
                          "typeName": "Vec<IdentificationTuple<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "At the end of the session, at least one validator was found to be offline."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 45
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  46
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Exposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "own_ring_balance",
                      "type": 47,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own_kton_balance",
                      "type": 47,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own_power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    },
                    {
                      "name": "others",
                      "type": 48,
                      "typeName": "Vec<IndividualExposure<AccountId, RingBalance, KtonBalance>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 49
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "IndividualExposure"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ring_balance",
                      "type": 47,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "kton_balance",
                      "type": 47,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "power",
                      "type": 4,
                      "typeName": "Power",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ScheduleMmrRoot",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A New MMR Root Scheduled Request to be Signed. \\[block number of the mmr root to sign\\]"
                      ]
                    },
                    {
                      "name": "MmrRootSigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "T::MmrRootT",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 51,
                          "typeName": "Vec<(T::AccountId, RelayAuthoritySignature<T>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "MMR Root Signed. \\[block number of the mmr root, mmr root, signatures\\]"
                      ]
                    },
                    {
                      "name": "ScheduleAuthoritiesChange",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "RelayAuthorityMessage<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A New Authority Set Change Scheduled Request to be Signed. \\[message to sign\\]"
                      ]
                    },
                    {
                      "name": "AuthoritiesChangeSigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "Term",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 54,
                          "typeName": "Vec<RelayAuthoritySigner<T>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 51,
                          "typeName": "Vec<(T::AccountId, RelayAuthoritySignature<T>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The Next Authorities Signed. \\[term, next authorities, signatures\\]"
                      ]
                    },
                    {
                      "name": "SlashOnMisbehavior",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Slash on Misbehavior. \\[who, slashed\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 52
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  53
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 55
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CollectingAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authorities changed. Collecting authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughAuthoritiesChangeSignatures",
                      "fields": [
                        {
                          "name": "operation",
                          "type": 57,
                          "typeName": "Operation",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_threshold",
                          "type": 59,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 60,
                          "typeName": "Vec<(Address, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Collected enough authorities change signatures."
                      ]
                    },
                    {
                      "name": "CollectingNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "New message root found. Collecting new message root signatures."
                      ]
                    },
                    {
                      "name": "CollectedEnoughNewMessageRootSignatures",
                      "fields": [
                        {
                          "name": "commitment",
                          "type": 63,
                          "typeName": "Commitment",
                          "docs": [

                          ]
                        },
                        {
                          "name": "message",
                          "type": 1,
                          "typeName": "Message",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signatures",
                          "type": 60,
                          "typeName": "Vec<(Address, Signature)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Collected enough new message root signatures."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Operation"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddMember",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RemoveMember",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SwapMembers",
                      "fields": [
                        {
                          "name": "pre",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "primitive_types",
                "H160"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 55,
                      "typeName": "[u8; /*«*/ 20 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 61
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  58,
                  62
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "[u8; 65]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "primitives",
                "Commitment"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message_root",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "depositors",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 66,
                          "typeName": "VoteThreshold",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SimpleMajority",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 68
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [

                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voted",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voted",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 72,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone has renounced their candidacy."
                      ]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A seat holder was slashed by amount by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 73
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 73,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal. \\[proposal_index\\]"
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt. \\[burn\\]"
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend.",
                        "\\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited. \\[deposit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal. \\[proposal_index\\]"
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt. \\[burn\\]"
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend.",
                        "\\[budget_remaining\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited. \\[deposit\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new tip suggestion has been opened."
                      ]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A tip suggestion has reached threshold and is closing."
                      ]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A tip suggestion has been closed."
                      ]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A tip suggestion has been retracted."
                      ]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A tip suggestion has been slashed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BountyProposed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New bounty proposal."
                      ]
                    },
                    {
                      "name": "BountyRejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bounty proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "BountyBecameActive",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A bounty proposal is funded and became active."
                      ]
                    },
                    {
                      "name": "BountyAwarded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A bounty is awarded to a beneficiary."
                      ]
                    },
                    {
                      "name": "BountyClaimed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A bounty is claimed by beneficiary."
                      ]
                    },
                    {
                      "name": "BountyCanceled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A bounty is cancelled."
                      ]
                    },
                    {
                      "name": "BountyExtended",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A bounty expiry is extended."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "new_sudoer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A call was dispatched. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Founded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The society is founded by the given identity. \\[founder\\]"
                      ]
                    },
                    {
                      "name": "Bid",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A membership bid just happened. The given account is the candidate's ID and their offer",
                        "is the second. \\[candidate_id, offer\\]"
                      ]
                    },
                    {
                      "name": "Vouch",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A membership bid just happened by vouching. The given account is the candidate's ID and",
                        "their offer is the second. The vouching party is the third. \\[candidate_id, offer,",
                        "vouching\\]"
                      ]
                    },
                    {
                      "name": "AutoUnbid",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A \\[candidate\\] was dropped (due to an excess of bids in the system)."
                      ]
                    },
                    {
                      "name": "Unbid",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A \\[candidate\\] was dropped (by their request)."
                      ]
                    },
                    {
                      "name": "Unvouch",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A \\[candidate\\] was dropped (by request of who vouched for them)."
                      ]
                    },
                    {
                      "name": "Inducted",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A group of candidates have been inducted. The batch's primary is the first value, the",
                        "batch in full is the second. \\[primary, candidates\\]"
                      ]
                    },
                    {
                      "name": "SuspendedMemberJudgement",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A suspended member has been judged. \\[who, judged\\]"
                      ]
                    },
                    {
                      "name": "CandidateSuspended",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A \\[candidate\\] has been suspended"
                      ]
                    },
                    {
                      "name": "MemberSuspended",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A \\[member\\] has been suspended"
                      ]
                    },
                    {
                      "name": "Challenged",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A \\[member\\] has been challenged"
                      ]
                    },
                    {
                      "name": "Vote",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A vote has been placed \\[candidate, voter, vote\\]"
                      ]
                    },
                    {
                      "name": "DefenderVote",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A vote has been placed for a defending member \\[voter, vote\\]"
                      ]
                    },
                    {
                      "name": "NewMaxMembers",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A new \\[max\\] member count has been set"
                      ]
                    },
                    {
                      "name": "Unfounded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Society is unfounded. \\[founder\\]"
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Some funds were deposited into the society account. \\[value\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A recovery process has been set up for an account."
                      ]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A recovery process has been initiated for lost account by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been vouched for by sender."
                      ]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been closed."
                      ]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Lost account has been successfully recovered by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A recovery process has been removed for an account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task. \\[when, index\\]"
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": "TaskAddress<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 87,
                          "typeName": "Option<Vec<u8>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task. \\[task, id, result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 86,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "darwinia_runtime",
                "pallets",
                "proxy",
                "ProxyType"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NonTransfer",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Governance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "IdentityJudgement",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EthereumBridge",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 90,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "U16"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timepoint",
                          "type": 92,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timepoint",
                          "type": 92,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "result",
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timepoint",
                          "type": 92,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "RawEvent"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RelayAffirmationId",
                  "type": 94
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Affirmed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "RelayAffirmationId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new relay header parcel affirmed. [relayer, relay affirmation id]"
                      ]
                    },
                    {
                      "name": "DisputedAndAffirmed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "RelayAffirmationId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A different affirmation submitted, dispute found. [relayer, relay affirmation id]"
                      ]
                    },
                    {
                      "name": "Extended",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 94,
                          "typeName": "RelayAffirmationId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An extended affirmation submitted, dispute go on. [relayer, relay affirmation id]"
                      ]
                    },
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 95,
                          "typeName": "Vec<EthereumBlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new round started. [game id, game sample points]"
                      ]
                    },
                    {
                      "name": "GameOver",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A game has been settled. [game id]"
                      ]
                    },
                    {
                      "name": "RemoveConfirmedParcel",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The specific confirmed parcel removed. [ethereum block number]"
                      ]
                    },
                    {
                      "name": "VerifyReceipt",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 96,
                          "typeName": "EthereumReceipt",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 106,
                          "typeName": "EthereumHeader",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "EthereumReceipt verification. [account, ethereum receipt, ethereum header]"
                      ]
                    },
                    {
                      "name": "Pended",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A relay header parcel got pended. [ethereum block number]"
                      ]
                    },
                    {
                      "name": "GuardVoted",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A guard voted. [ethereum block number, aye]"
                      ]
                    },
                    {
                      "name": "PendingRelayHeaderParcelConfirmed",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Pending relay header parcel confirmed. [ethereum block number, reason]"
                      ]
                    },
                    {
                      "name": "PendingRelayHeaderParcelRejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "EthereumBlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Pending relay header parcel rejected. [ethereum block number]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events for this module.",
                ""
              ]
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "dp_relayer_game",
                "RelayAffirmationId"
              ],
              "params": [
                {
                  "name": "RelayHeaderId",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "game_id",
                      "type": 8,
                      "typeName": "RelayHeaderId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 95,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 8
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "ethereum_primitives",
                "receipt",
                "TypedReceipt"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 97,
                          "typeName": "LegacyReceipt",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AccessList",
                      "fields": [
                        {
                          "name": null,
                          "type": 97,
                          "typeName": "LegacyReceipt",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559Transaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 97,
                          "typeName": "LegacyReceipt",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "ethereum_primitives",
                "receipt",
                "LegacyReceipt"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "gas_used",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "log_bloom",
                      "type": 100,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 102,
                      "typeName": "Vec<LogEntry>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "outcome",
                      "type": 105,
                      "typeName": "TransactionOutcome",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 99,
                      "typeName": "[u64; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 99,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 4,
                  "type": 8
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "ethbloom",
                "Bloom"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 101,
                      "typeName": "[u8; /*«*/ BLOOM_SIZE /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 101,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 256,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 102,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 103
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "ethereum_primitives",
                "log_entry",
                "LogEntry"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 58,
                      "typeName": "Address",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 104,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "ethereum_primitives",
                "receipt",
                "TransactionOutcome"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "StateRoot",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "H256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "StatusCode",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "ethereum_primitives",
                "header",
                "Header"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 8,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "author",
                      "type": 58,
                      "typeName": "Address",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "uncles_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra_data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "receipts_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "log_bloom",
                      "type": 100,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_used",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "difficulty",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "seal",
                      "type": 107,
                      "typeName": "Vec<Bytes>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "base_fee_per_gas",
                      "type": 108,
                      "typeName": "Option<U256>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "hash",
                      "type": 109,
                      "typeName": "Option<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 107,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 98
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "to_ethereum_backing",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RedeemRing",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 111,
                          "typeName": "EthereumTransactionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Someone redeem some *RING*. \\[account, amount, transaction index\\]"
                      ]
                    },
                    {
                      "name": "RedeemKton",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 111,
                          "typeName": "EthereumTransactionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Someone redeem some *KTON*. \\[account, amount, transaction index\\]"
                      ]
                    },
                    {
                      "name": "RedeemDeposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "DepositId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 111,
                          "typeName": "EthereumTransactionIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Someone redeem a deposit. \\[account, deposit id, amount, transaction index\\]"
                      ]
                    },
                    {
                      "name": "LockRing",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Someone lock some *RING*. \\[account, ethereum account, asset address, amount\\]"
                      ]
                    },
                    {
                      "name": "LockKton",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone lock some *KTON*. \\[account, ethereum account, asset address, amount\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  9,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "pallet_bridge_dispatch",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MessageRejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message has been rejected before reaching dispatch."
                      ]
                    },
                    {
                      "name": "MessageVersionSpecMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "SpecVersion",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been rejected by dispatcher because of spec version mismatch.",
                        "Last two arguments are: expected and passed spec version."
                      ]
                    },
                    {
                      "name": "MessageWeightMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message has been rejected by dispatcher because of weight mismatch.",
                        "Last two arguments are: expected and passed call weight."
                      ]
                    },
                    {
                      "name": "MessageSignatureMismatch",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Message signature mismatch."
                      ]
                    },
                    {
                      "name": "MessageCallDecodeFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "We have failed to decode Call from the message."
                      ]
                    },
                    {
                      "name": "MessageCallValidateFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 114,
                          "typeName": "TransactionValidityError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The call from the message has been rejected by the call validator."
                      ]
                    },
                    {
                      "name": "MessageDispatchPaymentFailed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The origin account has failed to pay fee for dispatching the message."
                      ]
                    },
                    {
                      "name": "MessageDispatched",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ChainId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 113,
                          "typeName": "BridgeMessageIdOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "DispatchResult",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Message has been dispatched with given result."
                      ]
                    },
                    {
                      "name": "_Dummy",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Phantom member, never used. Needed to handle multiple pallet instances."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  14,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "name": null,
                          "type": 115,
                          "typeName": "InvalidTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "name": null,
                          "type": 116,
                          "typeName": "UnknownTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Payment",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Future",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Stale",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AncientBirthBlock",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ExhaustsResources",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BadMandatory",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MandatoryDispatch",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParameterUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 118,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Pallet parameter has been updated."
                      ]
                    },
                    {
                      "name": "MessageAccepted",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message has been accepted and is waiting to be delivered."
                      ]
                    },
                    {
                      "name": "MessagesDelivered",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 120,
                          "typeName": "DeliveredMessages",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Messages in the inclusive range have been delivered to the bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "darwinia_runtime",
                "bridges_message",
                "crab",
                "DarwiniaToCrabMessagesParameter"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CrabToDarwiniaConversionRate",
                      "fields": [
                        {
                          "name": null,
                          "type": 119,
                          "typeName": "FixedU128",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "/*«*/ u128 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "bp_messages",
                "DeliveredMessages"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_results",
                      "type": 121,
                      "typeName": "DispatchResultsBitVec",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "bitSequence": {
                  "bitStoreType": 2,
                  "bitOrderType": 122
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "bitvec",
                "order",
                "Msb0"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Enroll",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Relayer enrollment. \\[account_id, locked_collateral, relay_fee\\]"
                      ]
                    },
                    {
                      "name": "UpdateLockedCollateral",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update relayer locked collateral. \\[account_id, new_collateral\\]"
                      ]
                    },
                    {
                      "name": "UpdateRelayFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update relayer fee. \\[account_id, new_fee\\]"
                      ]
                    },
                    {
                      "name": "CancelEnrollment",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Relayer cancel enrollment. \\[account_id\\]"
                      ]
                    },
                    {
                      "name": "UpdateCollateralSlashProtect",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update collateral slash protect value. \\[slash_protect_value\\]"
                      ]
                    },
                    {
                      "name": "UpdateAssignedRelayersNumber",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Update market assigned relayers numbers. \\[new_assigned_relayers_number\\]"
                      ]
                    },
                    {
                      "name": "FeeMarketSlash",
                      "fields": [
                        {
                          "name": null,
                          "type": 124,
                          "typeName": "SlashReport<T::AccountId, T::BlockNumber, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Slash report"
                      ]
                    },
                    {
                      "name": "OrderCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 59,
                          "typeName": "Option<T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Create new order. \\[lane_id, message_nonce, order_fee, assigned_relayers,",
                        "out_of_slots_time\\]"
                      ]
                    },
                    {
                      "name": "OrderReward",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 125,
                          "typeName": "RewardItem<T::AccountId, BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Reward distribute of the order. \\[lane_id, message_nonce, rewards\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "SlashReport"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 59,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay_time",
                      "type": 59,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "pallet_fee_market",
                "s2s",
                "payment",
                "RewardItem"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "to_assigned_relayers",
                      "type": 126,
                      "typeName": "BTreeMap<AccountId, Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_treasury",
                      "type": 127,
                      "typeName": "Option<Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_message_relayer",
                      "type": 128,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to_confirm_relayer",
                      "type": 128,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 72,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 73
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 73,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "to_substrate_backing",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TokenRegistered",
                      "fields": [
                        {
                          "name": null,
                          "type": 130,
                          "typeName": "TokenMetadata",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Token registered \\[token metadata, sender\\]"
                      ]
                    },
                    {
                      "name": "TokenLocked",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Token locked \\[lane_id, message_nonce, token address, sender, recipient, amount\\]"
                      ]
                    },
                    {
                      "name": "TokenUnlocked",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Token unlocked \\[lane_id, message_nonce, token_address, recipient, amount\\]"
                      ]
                    },
                    {
                      "name": "TokenLockedConfirmed",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Token locked confirmed from remote \\[lane_id, message_nonce, user, amount, result\\]"
                      ]
                    },
                    {
                      "name": "RemoteMappingFactoryAddressUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update remote mapping token factory address \\[account\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "dp_asset",
                "TokenMetadata"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "token_type",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "address",
                      "type": 58,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "symbol",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "decimal",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Log",
                      "fields": [
                        {
                          "name": "log",
                          "type": 132,
                          "typeName": "Log",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Ethereum events from contracts."
                      ]
                    },
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract has been created at given."
                      ]
                    },
                    {
                      "name": "CreatedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A contract was attempted to be created, but the execution failed."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A contract has been executed successfully with states applied."
                      ]
                    },
                    {
                      "name": "ExecutedFailed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A contract has been executed with errors. States are reverted with only gas fees",
                        "applied."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "ethereum",
                "log",
                "Log"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 58,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "topics",
                      "type": 104,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "from",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "transaction_hash",
                          "type": 9,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "exit_reason",
                          "type": 134,
                          "typeName": "ExitReason",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An ethereum transaction was successfully executed."
                      ]
                    },
                    {
                      "name": "DVMTransfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "DVM transfer."
                      ]
                    },
                    {
                      "name": "KtonDVMTransfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Kton transfer."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Ethereum pallet events."
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitReason"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Succeed",
                      "fields": [
                        {
                          "name": null,
                          "type": 135,
                          "typeName": "ExitSucceed",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Revert",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "ExitRevert",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Fatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 140,
                          "typeName": "ExitFatal",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitSucceed"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Stopped",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Returned",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Suicided",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitError"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StackUnderflow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "StackOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidJump",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidRange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "DesignatedInvalid",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallTooDeep",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateCollision",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateContractLimit",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InvalidCode",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfOffset",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfGas",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfFund",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PCUnderflow",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CreateEmpty",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 137,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 138
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 138,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "primitive": "Str"
              },
              "docs": [

              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitRevert"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Reverted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "evm_core",
                "error",
                "ExitFatal"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotSupported",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "UnhandledInterrupt",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CallErrorAsFatal",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "ExitError",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 137,
                          "typeName": "Cow<'static, str>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Event"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBaseFeePerGas",
                      "fields": [
                        {
                          "name": null,
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFeeOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "IsActive",
                      "fields": [
                        {
                          "name": null,
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "NewElasticity",
                      "fields": [
                        {
                          "name": null,
                          "type": 142,
                          "typeName": "Permill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "/*«*/ u32 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Finalization",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Initialization",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 86
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 146,
                      "typeName": "codec::Compact<u32>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_name",
                      "type": 138,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 148,
                          "typeName": "Perbill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 149,
                          "typeName": "Vec<KeyValue>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 107,
                          "typeName": "Vec<Key>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key",
                          "docs": [

                          ]
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event.",
                        "",
                        "# <weight>",
                        "- `O(b)` where b is the length of the remark.",
                        "- 1 event.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "/*«*/ u32 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 150
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 150,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  10,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "per_class",
                      "type": 152,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 153
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 153,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 153,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 153,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 154,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_total",
                      "type": 154,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reserved",
                      "type": 154,
                      "typeName": "Option<Weight>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 156,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 138,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_name",
                      "type": 138,
                      "typeName": "RuntimeString",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "apis",
                      "type": 159,
                      "typeName": "ApisVec",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 160
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 160,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 160,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 161
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 161,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  162,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 165
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 167,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  166,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "sp_consensus_babe",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 167,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 165
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "name": "c",
                          "type": 170,
                          "typeName": "(u64, u64)",
                          "docs": [

                          ]
                        },
                        {
                          "name": "allowed_slots",
                          "type": 171,
                          "typeName": "AllowedSlots",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 170,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  8,
                  8
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "sp_consensus_babe",
                "AllowedSlots"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PrimarySlots",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PrimaryAndSecondaryPlainSlots",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PrimaryAndSecondaryVRFSlots",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 173,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 173,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 1
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "c",
                      "type": 170,
                      "typeName": "(u64, u64)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "allowed_slots",
                      "type": 171,
                      "typeName": "AllowedSlots",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 177,
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 180,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 177,
                          "typeName": "Box<EquivocationProof<T::Header>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 180,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report authority equivocation/misbehavior. This method will verify",
                        "the equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence will",
                        "be reported.",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "plan_config_change",
                      "fields": [
                        {
                          "name": "config",
                          "type": 169,
                          "typeName": "NextConfigDescriptor",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                        "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                        "Multiple calls to this method will replace any existing planned config change that had",
                        "not been enacted yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 178
                },
                {
                  "name": "Id",
                  "type": 166
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 166,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "slot",
                      "type": 168,
                      "typeName": "Slot",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first_header",
                      "type": 178,
                      "typeName": "Header",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second_header",
                      "type": 178,
                      "typeName": "Header",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 179
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 146,
                      "typeName": "Number",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output",
                      "docs": [

                      ]
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "sp_session",
                "MembershipProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "session",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "trie_nodes",
                      "type": 107,
                      "typeName": "Vec<Vec<u8>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validator_count",
                      "type": 4,
                      "typeName": "ValidatorCount",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "pallet_babe",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 183,
                          "typeName": "T::Moment",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 8
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 185
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 187,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "LockIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reasons",
                      "type": 186,
                      "typeName": "Reasons",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Reasons"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Misc",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "All",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 187,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 185
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 189
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 190,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 162
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ReserveIdentifier",
                      "docs": [

                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 190,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 189
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the `TransferFee`.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_free",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_reserved",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also decrease the total issuance of the system (`TotalIssuance`).",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "keep_alive",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 68
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 194,
                          "typeName": "AccountIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "[u8; 20]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 68
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    },
                    {
                      "name": "LockP",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Lock - POISONED."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the `TransferFee`.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_free",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new_reserved",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also decrease the total issuance of the system (`TotalIssuance`).",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "keep_alive",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "darwinia_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    },
                    {
                      "name": "LockP",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Lock - POISONED."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 200
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "WeightToFeeCoefficient"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "coeff_integer",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "coeff_frac",
                      "type": 148,
                      "typeName": "Perbill",
                      "docs": [

                      ]
                    },
                    {
                      "name": "negative",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "degree",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 201,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 202
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "name": null,
                          "type": 9,
                          "typeName": "Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 203,
                          "typeName": "Option<Author>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 205,
                          "typeName": "Vec<T::Header>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 178
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
              ],
              "params": [
                {
                  "name": "Bn",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Off",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Unsigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 208,
                          "typeName": "(bool, Bn)",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Emergency",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 208,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  30,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "supports",
                      "type": 210,
                      "typeName": "Supports<A>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "score",
                      "type": 213,
                      "typeName": "ElectionScore",
                      "docs": [

                      ]
                    },
                    {
                      "name": "compute",
                      "type": 29,
                      "typeName": "ElectionCompute",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 210,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 211
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 211,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  212
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "sp_npos_elections",
                "Support"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "ExtendedBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "voters",
                      "type": 72,
                      "typeName": "Vec<(AccountId, ExtendedBalance)>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 213,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 3,
                  "type": 6
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
              ],
              "params": [
                {
                  "name": "A",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 215,
                      "typeName": "Vec<(A, VoteWeight, Vec<A>)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "targets",
                      "type": 65,
                      "typeName": "Vec<A>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 215,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 216
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 216,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  8,
                  65
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "voters",
                      "type": 146,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "targets",
                      "type": 146,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 213
                },
                {
                  "name": "V",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 219,
                      "typeName": "BTreeMap<K, V>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 213
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 220,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 221
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 221,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  213,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Solution",
                  "type": 223
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "raw_solution",
                      "type": 274,
                      "typeName": "RawSolution<Solution>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reward",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "darwinia_runtime",
                "pallets",
                "election_provider_multi_phase",
                "NposCompactSolution16"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes1",
                      "type": 224,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes2",
                      "type": 227,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes3",
                      "type": 232,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes4",
                      "type": 235,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes5",
                      "type": 238,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes6",
                      "type": 241,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes7",
                      "type": 244,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes8",
                      "type": 247,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes9",
                      "type": 250,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes10",
                      "type": 253,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes11",
                      "type": 256,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes12",
                      "type": 259,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes13",
                      "type": 262,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes14",
                      "type": 265,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes15",
                      "type": 268,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes16",
                      "type": 271,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 225
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 225,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 226,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 90
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 227,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 228
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 228,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  229,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 229,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  226,
                  230
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 230,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 231
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 90,
                      "typeName": "/*«*/ u16 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 232,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 233
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  234,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 234,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 2,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 236
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  237,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 237,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 3,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 238,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 239
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 239,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  240,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 240,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 4,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 242
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  243,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 5,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 244,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 245
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 245,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  246,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 6,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 247,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 248
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  249,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 249,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 7,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 250,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 251
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  252,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 8,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 254
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 254,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  255,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 255,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 9,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 256,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 257
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  258,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 258,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 10,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 259,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 260
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  261,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 261,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 11,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 262,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 263
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  264,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 264,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 12,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 265,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 266
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 266,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  267,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 267,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 13,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 268,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 269
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 269,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  270,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 270,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 14,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 272
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 272,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  146,
                  273,
                  226
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 273,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 15,
                  "type": 229
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
              ],
              "params": [
                {
                  "name": "S",
                  "type": 223
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution",
                      "type": 223,
                      "typeName": "S",
                      "docs": [

                      ]
                    },
                    {
                      "name": "score",
                      "type": 213,
                      "typeName": "ElectionScore",
                      "docs": [

                      ]
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_unsigned",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 274,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "witness",
                          "type": 217,
                          "typeName": "SolutionOrSnapshotSize",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Submit a solution for the unsigned phase.",
                        "",
                        "The dispatch origin fo this call must be __none__.",
                        "",
                        "This submission is checked on the fly. Moreover, this unsigned solution is only",
                        "validated when submitted to the pool from the **local** node. Effectively, this means",
                        "that only active validators can submit this transaction when authoring a block (similar",
                        "to an inherent).",
                        "",
                        "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                        "panic if the solution submitted by the validator is invalid in any way, effectively",
                        "putting their authoring reward at risk.",
                        "",
                        "No deposit or reward is associated with this submission."
                      ]
                    },
                    {
                      "name": "set_minimum_untrusted_score",
                      "fields": [
                        {
                          "name": "maybe_next_score",
                          "type": 276,
                          "typeName": "Option<ElectionScore>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set a new value for `MinimumUntrustedScore`.",
                        "",
                        "Dispatch origin must be aligned with `T::ForceOrigin`.",
                        "",
                        "This check can be turned off by setting the value to `None`."
                      ]
                    },
                    {
                      "name": "set_emergency_election_result",
                      "fields": [
                        {
                          "name": "supports",
                          "type": 210,
                          "typeName": "Supports<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                        "call to `ElectionProvider::elect`.",
                        "",
                        "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                        "",
                        "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                        "feasibility check itself can in principle cause the election process to fail (due to",
                        "memory/weight constrains)."
                      ]
                    },
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "raw_solution",
                          "type": 274,
                          "typeName": "Box<RawSolution<SolutionOf<T>>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_signed_submissions",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit a solution for the signed phase.",
                        "",
                        "The dispatch origin fo this call must be __signed__.",
                        "",
                        "The solution is potentially queued, based on the claimed score and processed at the end",
                        "of the signed phase.",
                        "",
                        "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                        "might be rewarded, slashed, or get all or a part of the deposit back.",
                        "",
                        "# <weight>",
                        "Queue size must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 213
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 213,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreDispatchEarlySubmission",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Submission was too early."
                      ]
                    },
                    {
                      "name": "PreDispatchWrongWinnerCount",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Wrong number of winners presented."
                      ]
                    },
                    {
                      "name": "PreDispatchWeakSubmission",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Submission was too weak, score-wise."
                      ]
                    },
                    {
                      "name": "SignedQueueFull",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The queue was full, and the solution was not better than any of the existing ones."
                      ]
                    },
                    {
                      "name": "SignedCannotPayDeposit",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The origin failed to pay the deposit."
                      ]
                    },
                    {
                      "name": "SignedInvalidWitness",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Witness data to dispatchable is invalid."
                      ]
                    },
                    {
                      "name": "SignedTooMuchWeight",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The signed submission consumes too much weight"
                      ]
                    },
                    {
                      "name": "OcwCallWrongEra",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "OCW submitted solution for wrong round"
                      ]
                    },
                    {
                      "name": "MissingSnapshotMetadata",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Snapshot metadata should exist but didn't."
                      ]
                    },
                    {
                      "name": "InvalidSubmissionIndex",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "`Self::insert_submission` returned an invalid index."
                      ]
                    },
                    {
                      "name": "CallNotAllowed",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The call is not allowed at this point."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error of the pallet that can be returned in response to dispatches."
              ]
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "StakingLedger"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active",
                      "type": 47,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active_deposit_ring",
                      "type": 47,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "active_kton",
                      "type": 47,
                      "typeName": "KtonBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit_items",
                      "type": 279,
                      "typeName": "Vec<TimeDepositItem<RingBalance>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ring_staking_lock",
                      "type": 281,
                      "typeName": "StakingLock<RingBalance, BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "kton_staking_lock",
                      "type": 281,
                      "typeName": "StakingLock<KtonBalance, BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "claimed_rewards",
                      "type": 285,
                      "typeName": "Vec<EraIndex>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 280
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "TimeDepositItem"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 47,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "start_time",
                      "type": 183,
                      "typeName": "TsInMs",
                      "docs": [

                      ]
                    },
                    {
                      "name": "expire_time",
                      "type": 183,
                      "typeName": "TsInMs",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "darwinia_support",
                "structs",
                "StakingLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "staking_amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "unbondings",
                      "type": 282,
                      "typeName": "WeakBoundedVec<Unbonding<Balance, Moment>, ConstU32<32>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 283
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 284,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "darwinia_support",
                "structs",
                "Unbonding"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "until",
                      "type": 4,
                      "typeName": "Moment",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 284,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 283
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 285,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 4
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "RewardDestination"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Stash",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Controller",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "ValidatorPrefs"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "commission",
                      "type": 288,
                      "typeName": "Perbill",
                      "docs": [

                      ]
                    },
                    {
                      "name": "blocked",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 288,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "compact": {
                  "type": 148
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Nominations"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "targets",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "submitted_in",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "suppressed",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "ActiveEraInfo"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "start",
                      "type": 154,
                      "typeName": "Option<u64>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 291,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "EraRewardPoints"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 4,
                      "typeName": "RewardPoint",
                      "docs": [

                      ]
                    },
                    {
                      "name": "individual",
                      "type": 293,
                      "typeName": "BTreeMap<AccountId, RewardPoint>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 294,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 295
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 295,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Forcing"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotForcing",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceNew",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceNone",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ForceAlways",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 297,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 298
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "UnappliedSlash"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "own",
                      "type": 299,
                      "typeName": "slashing::RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "others",
                      "type": 300,
                      "typeName": "Vec<(AccountId, slashing::RK<RingBalance, KtonBalance>)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reporters",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "payout",
                      "type": 299,
                      "typeName": "slashing::RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "RK"
              ],
              "params": [
                {
                  "name": "R",
                  "type": 6
                },
                {
                  "name": "K",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "r",
                      "type": 6,
                      "typeName": "R",
                      "docs": [

                      ]
                    },
                    {
                      "name": "k",
                      "type": 6,
                      "typeName": "K",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 300,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 301
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  299
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 302,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  148,
                  299
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "SlashingSpans"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "span_index",
                      "type": 4,
                      "typeName": "SpanIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_start",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_nonzero_slash",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "prior",
                      "type": 285,
                      "typeName": "Vec<EraIndex>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "darwinia_staking",
                "slashing",
                "SpanRecord"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "slashed",
                      "type": 299,
                      "typeName": "RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "paid_out",
                      "type": 299,
                      "typeName": "RK<RingBalance, KtonBalance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 305,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 306
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  30
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0Ancient",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V3_0_0",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V4_0_0",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V5_0_0",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V6_0_0",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V7_0_0",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": "/*«*/ u8 /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 310,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payee",
                          "type": 286,
                          "typeName": "RewardDestination<AccountId<T>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                        "be the account that controls it.",
                        "",
                        "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash account.",
                        "",
                        "Emits `Bonded`.",
                        "# <weight>",
                        "- Independent of the arguments. Moderate complexity.",
                        "- O(1).",
                        "- Three extra DB entries.",
                        "",
                        "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                        "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                        "------------------",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "max_additional",
                          "type": 310,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                        "for staking.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Use this if there are additional funds in your stash account that you wish to bond.",
                        "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                        "any limitation on the amount that can be added.",
                        "",
                        "Emits `Bonded`.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "deposit_extra",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "promise_month",
                          "type": 2,
                          "typeName": "u8",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Deposit some extra amount ring, and return kton to the controller.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "Is a no-op if value to be deposited is zero.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- O(1).",
                        "- One DB entry.",
                        "------------",
                        "DB Weight:",
                        "- Read: Era Election Status, Bonded, Ledger, [Origin Account]",
                        "- Write: [Origin Account], Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "value",
                          "type": 310,
                          "typeName": "StakingBalanceT<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                        "period ends. If this leaves an amount actively bonded less than",
                        "T::Currency::minimum_balance(), then it is increased to the full amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "Once the unlock period is done, the funds will be withdrew automatically and ready for",
                        "transfer.",
                        "",
                        "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                        "can co-exists at the same time. In that case,  [`StakingLock::shrink`] need",
                        "to be called first to remove some of the chunks (if possible).",
                        "",
                        "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                        "they should call `chill` first in order to free up their bonded funds.",
                        "",
                        "After all pledged Ring and Kton are unbonded, the bonded accounts, namely stash and",
                        "controller, will also be unbonded.  Once user want to bond again, the `bond` method",
                        "should be called. If there are still pledged Ring or Kton and user want to bond more",
                        "values, the `bond_extra` method should be called."
                      ]
                    },
                    {
                      "name": "withdraw_unbonded",
                      "fields": [
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove any unlocked chunks from the `unlocking` queue from our management.",
                        "",
                        "This essentially frees up that balance to be used by the stash account to do",
                        "whatever it wants.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller.",
                        "",
                        "Emits `Withdrawn`.",
                        "",
                        "See also [`Call::unbond`].",
                        "",
                        "# <weight>",
                        "Complexity O(S) where S is the number of slashing spans to remove",
                        "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_mature_deposits",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Stash accounts can get their ring back after the depositing time exceeded,",
                        "and the ring getting back is still in staking status.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- One storage read.",
                        "- One storage write.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "DB Weight:",
                        "- Read: Ledger, [Origin Account]",
                        "- Write: [Origin Account], Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "try_claim_deposits_with_punish",
                      "fields": [
                        {
                          "name": "expire_time",
                          "type": 8,
                          "typeName": "TsInMs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim deposits while the depositing time has not been exceeded, the ring",
                        "will not be slashed, but the account is required to pay KTON as punish.",
                        "",
                        "Refer to https://talk.darwinia.network/topics/55",
                        "",
                        "Assume the `expire_time` is a unique ID for the deposit",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- One storage read.",
                        "- One storage write.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "DB Weight:",
                        "- Read: Ledger, Locks, [Origin Account]",
                        "- Write: [Origin Account], Locks, Ledger",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "validate",
                      "fields": [
                        {
                          "name": "prefs",
                          "type": 287,
                          "typeName": "ValidatorPrefs",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Declare the desire to validate for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                      ]
                    },
                    {
                      "name": "nominate",
                      "fields": [
                        {
                          "name": "targets",
                          "type": 311,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Declare the desire to nominate `targets` for the origin controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- The transaction's complexity is proportional to the size of `targets` (N)",
                        "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                        "- Both the reads and writes follow a similar pattern."
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Declare no desire to either validate or nominate.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains one read.",
                        "- Writes are limited to the `origin` account key.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_payee",
                      "fields": [
                        {
                          "name": "payee",
                          "type": 286,
                          "typeName": "RewardDestination<AccountId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "(Re-)set the payment target for a controller.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "---------",
                        "- Weight: O(1)",
                        "- DB Weight:",
                        "    - Read: Ledger",
                        "    - Write: Payee",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_controller",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "(Re-)set the controller of a stash.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                        "",
                        "# <weight>",
                        "- Independent of the arguments. Insignificant complexity.",
                        "- Contains a limited number of reads.",
                        "- Writes are limited to the `origin` account key.",
                        "----------",
                        "Weight: O(1)",
                        "DB Weight:",
                        "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                        "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_validator_count",
                      "fields": [
                        {
                          "name": "new",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Sets the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Weight: O(1)",
                        "Write: Validator Count",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "increase_validator_count",
                      "fields": [
                        {
                          "name": "additional",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Increments the ideal number of validators.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "scale_validator_count",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 308,
                          "typeName": "Percent",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Scale up the ideal number of validators by a factor.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "Same as [`Self::set_validator_count`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_no_eras",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Force there to be no new eras indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "Thus the election process may be ongoing when this is called. In this case the",
                        "election will continue until the next era is triggered.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Force there to be a new era at the end of the next session. After this, it will be",
                        "reset to normal (non-forced) behaviour.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- No arguments.",
                        "- Weight: O(1)",
                        "- Write ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 65,
                          "typeName": "Vec<AccountId<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Set the validators who cannot be slashed (if any).",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "- O(V)",
                        "- Write: Invulnerables",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_unstake",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Force a current staker to become completely unstaked, immediately.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# <weight>",
                        "O(S) where S is the number of slashing spans to be removed",
                        "Reads: Bonded, Slashing Spans, Account, Locks",
                        "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                        "Account, Locks Writes Each: SpanSlash * S",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_new_era_always",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "Force there to be a new era at the end of sessions indefinitely.",
                        "",
                        "The dispatch origin must be Root.",
                        "",
                        "# Warning",
                        "",
                        "The election process starts multiple blocks before the end of the era.",
                        "If this is called just before a new era is triggered, the election process may not",
                        "have enough blocks to get a result.",
                        "",
                        "# <weight>",
                        "- Weight: O(1)",
                        "- Write: ForceEra",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_deferred_slash",
                      "fields": [
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "slash_indices",
                          "type": 285,
                          "typeName": "Vec<u32>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel enactment of a deferred slash.",
                        "",
                        "Can be called by the `T::SlashCancelOrigin`.",
                        "",
                        "Parameters: era and indices of the slashes for that era to kill.",
                        "",
                        "# <weight>",
                        "Complexity: O(U + S)",
                        "with U unapplied slashes weighted with U=1000",
                        "and S is the number of slash indices to be canceled.",
                        "- Read: Unapplied Slashes",
                        "- Write: Unapplied Slashes",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "payout_stakers",
                      "fields": [
                        {
                          "name": "validator_stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "era",
                          "type": 4,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Pay out all the stakers behind a single validator for a single era.",
                        "",
                        "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                        "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                        "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                        "",
                        "The origin of this call must be _Signed_. Any account can call this function, even if",
                        "it is not one of the stakers.",
                        "",
                        "# <weight>",
                        "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                        "- Contains a limited number of reads and writes.",
                        "-----------",
                        "N is the Number of payouts for the validator (including the validator)",
                        "Weight:",
                        "- Reward Destination Staked: O(N)",
                        "- Reward Destination Controller (Creating): O(N)",
                        "",
                        "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                        "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "plan_to_rebond_ring",
                          "type": 47,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "plan_to_rebond_kton",
                          "type": 47,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Rebond a portion of the stash scheduled to be unlocked.",
                        "",
                        "The dispatch origin must be signed by the controller.",
                        "",
                        "# <weight>",
                        "- Time complexity: O(L), where L is unlocking chunks",
                        "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
                        "- Storage changes: Can't increase storage, only decrease it.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_history_depth",
                      "fields": [
                        {
                          "name": "new_history_depth",
                          "type": 146,
                          "typeName": "EraIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "era_items_deleted",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Set `HistoryDepth` value. This function will delete any history information",
                        "when `HistoryDepth` is reduced.",
                        "",
                        "Parameters:",
                        "- `new_history_depth`: The new history depth you would like to set.",
                        "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
                        "  should report all the storage items that will be deleted by clearing old era history.",
                        "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
                        "  accurate number.",
                        "",
                        "Origin must be root.",
                        "",
                        "# <weight>",
                        "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                        "- Weight: O(E)",
                        "- DB Weight:",
                        "    - Reads: Current Era, History Depth",
                        "    - Writes: History Depth",
                        "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                        "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
                        "      ErasStartSessionIndex",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reap_stash",
                      "fields": [
                        {
                          "name": "stash",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_slashing_spans",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove all data structures concerning a staker/stash once it is at a state where it can",
                        "be considered `dust` in the staking system. The requirements are:",
                        "",
                        "1. the `total_balance` of the stash is below existential deposit.",
                        "2. or, the `ledger.total` of the stash is below existential deposit.",
                        "",
                        "The former can happen in cases like a slash; the latter when a fully unbonded account",
                        "is still receiving staking rewards in `RewardDestination::Staked`.",
                        "",
                        "It can be called by anyone, as long as `stash` meets the above requirements.",
                        "",
                        "Refunds the transaction fees upon successful execution."
                      ]
                    },
                    {
                      "name": "kick",
                      "fields": [
                        {
                          "name": "who",
                          "type": 311,
                          "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Remove the given nominations from the calling validator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                        "",
                        "- `who`: A list of nominator stash accounts who are nominating this validator which",
                        "  should no longer be nominating this validator.",
                        "",
                        "Note: Making this call only makes sense if you first set the validator preferences to",
                        "block any further nominations."
                      ]
                    },
                    {
                      "name": "set_staking_limits",
                      "fields": [
                        {
                          "name": "min_nominator_bond",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "min_validator_bond",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_nominator_count",
                          "type": 59,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_validator_count",
                          "type": 59,
                          "typeName": "Option<u32>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 312,
                          "typeName": "Option<Percent>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Update the various staking limits this pallet.",
                        "",
                        "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                        "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                        "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "* `max_validator_count`: The max number of users who can be a validator at once. When",
                        "  set to `None`, no limit is enforced.",
                        "",
                        "Origin must be Root to call this function.",
                        "",
                        "NOTE: Existing nominators and validators will not be affected by this update.",
                        "to kick people under the new limits, `chill_other` should be called."
                      ]
                    },
                    {
                      "name": "chill_other",
                      "fields": [
                        {
                          "name": "controller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Declare a `controller` to stop participating as either a validator or nominator.",
                        "",
                        "Effects will be felt at the beginning of the next era.",
                        "",
                        "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                        "",
                        "If the caller is the same as the controller being targeted, then no further checks are",
                        "enforced, and this function behaves just like `chill`.",
                        "",
                        "If the caller is different than the controller being targeted, the following conditions",
                        "must be met:",
                        "* A `ChillThreshold` must be set and checked which defines how close to the max",
                        "  nominators or validators we must reach before users can start chilling one-another.",
                        "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                        "  how close we are to the threshold.",
                        "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                        "  if this is a person that should be chilled because they have not met the threshold",
                        "  bond required.",
                        "",
                        "This can be helpful if bond requirements are updated, and we need to remove old users",
                        "who do not satisfy these requirements."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "darwinia_staking",
                "structs",
                "StakingBalance"
              ],
              "params": [
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "KtonBalance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RingBalance",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "RingBalance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KtonBalance",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "KtonBalance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 193
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 308
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 308,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "darwinia_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotController",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Not a controller account."
                      ]
                    },
                    {
                      "name": "NotStash",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Not a stash account."
                      ]
                    },
                    {
                      "name": "AlreadyBonded",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Stash is already bonded."
                      ]
                    },
                    {
                      "name": "AlreadyPaired",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Controller is already paired."
                      ]
                    },
                    {
                      "name": "EmptyTargets",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Targets cannot be empty."
                      ]
                    },
                    {
                      "name": "DuplicateIndex",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Duplicate index."
                      ]
                    },
                    {
                      "name": "InvalidSlashIndex",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Slash record index out of bounds."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Cannot have a validator or nominator role, with value less than the minimum defined by",
                        "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                        "intention, `chill` first to remove one's role as validator/nominator."
                      ]
                    },
                    {
                      "name": "NoMoreChunks",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Can not schedule more unlock chunks."
                      ]
                    },
                    {
                      "name": "NoUnlockChunk",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Can not rebond without unlocking chunks."
                      ]
                    },
                    {
                      "name": "FundedTarget",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Attempting to target a stash that still has funds."
                      ]
                    },
                    {
                      "name": "InvalidEraToReward",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Invalid era to reward."
                      ]
                    },
                    {
                      "name": "InvalidNumberOfNominations",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Invalid number of nominations."
                      ]
                    },
                    {
                      "name": "NotSortedAndUnique",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Items are not sorted and unique."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Rewards for this era have already been claimed for this validator."
                      ]
                    },
                    {
                      "name": "IncorrectHistoryDepth",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Incorrect previous history depth input provided."
                      ]
                    },
                    {
                      "name": "IncorrectSlashingSpans",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Incorrect number of slashing spans provided."
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "Internal state has become somehow corrupted and the operation cannot continue."
                      ]
                    },
                    {
                      "name": "TooManyTargets",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "Too many nomination targets supplied."
                      ]
                    },
                    {
                      "name": "BadTarget",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "A nomination target was supplied that was blocked or otherwise not a validator."
                      ]
                    },
                    {
                      "name": "CannotChillOther",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [
                        "The user has enough bond and thus cannot be chilled forcefully by an external person."
                      ]
                    },
                    {
                      "name": "TooManyNominators",
                      "fields": [

                      ],
                      "index": 21,
                      "docs": [
                        "There are too many nominators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "TooManyValidators",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [
                        "There are too many validators in the system. Governance needs to adjust the staking",
                        "settings to keep things safe for the runtime."
                      ]
                    },
                    {
                      "name": "PayoutIns",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [
                        "Payout - INSUFFICIENT"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Reporter",
                  "type": 0
                },
                {
                  "name": "Offender",
                  "type": 45
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 45,
                      "typeName": "Offender",
                      "docs": [

                      ]
                    },
                    {
                      "name": "reporters",
                      "type": 65,
                      "typeName": "Vec<Reporter>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 315,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  34,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 316,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 317
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 317,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  318
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "darwinia_runtime",
                "pallets",
                "session",
                "SessionKeys"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "babe",
                      "type": 166,
                      "typeName": "</*«*/ Babe /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "grandpa",
                      "type": 39,
                      "typeName": "</*«*/ Grandpa /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "im_online",
                      "type": 42,
                      "typeName": "</*«*/ ImOnline /*»*/ as $crate::BoundToRuntimeAppPublic>::Public",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_discovery",
                      "type": 319,
                      "typeName": "</*«*/ AuthorityDiscovery /*»*/ as $crate::BoundToRuntimeAppPublic>::\nPublic",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "sp_authority_discovery",
                "app",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 43,
                      "typeName": "/*«*/ sr25519::Public /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 320,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  321,
                  10
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 14,
                      "typeName": "[u8; 4]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 318,
                          "typeName": "T::Keys",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "next_authorities",
                      "type": 326,
                      "typeName": "BoundedAuthorityList<Limit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "forced",
                      "type": 59,
                      "typeName": "Option<N>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 37,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 327,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 328,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 180,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 328,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 180,
                          "typeName": "T::KeyOwnerProof",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has",
                        "stalled. This will trigger a forced authority set change at the beginning",
                        "of the next session, to be enacted `delay` blocks after that. The delay",
                        "should be high enough to safely assume that the block signalling the",
                        "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                        "will start the new authority set using the given finalized block as base.",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "equivocation",
                      "type": 329,
                      "typeName": "Equivocation<H, N>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "name": null,
                          "type": 330,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "name": null,
                          "type": 336,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 39
                },
                {
                  "name": "V",
                  "type": 331
                },
                {
                  "name": "S",
                  "type": 332
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "identity",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first",
                      "type": 335,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second",
                      "type": 335,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 333,
                      "typeName": "/*«*/ ed25519::Signature /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 334,
                      "typeName": "[u8; 64]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 334,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 335,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  331,
                  332
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 39
                },
                {
                  "name": "V",
                  "type": 337
                },
                {
                  "name": "S",
                  "type": 332
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "identity",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    },
                    {
                      "name": "first",
                      "type": 338,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    },
                    {
                      "name": "second",
                      "type": 338,
                      "typeName": "(V, S)",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 338,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  337,
                  332
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 42
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 341,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 341,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 42
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 343
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 146,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": null,
                      "type": 343,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "pallet_im_online",
                "BoundedOpaqueNetworkState"
              ],
              "params": [
                {
                  "name": "PeerIdEncodingLimit",
                  "type": null
                },
                {
                  "name": "MultiAddrEncodingLimit",
                  "type": null
                },
                {
                  "name": "AddressesLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 344,
                      "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "external_addresses",
                      "type": 345,
                      "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 344
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 346,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 346,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 344
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "heartbeat",
                      "fields": [
                        {
                          "name": "heartbeat",
                          "type": 348,
                          "typeName": "Heartbeat<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 353,
                          "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "# <weight>",
                        "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                        "  length of `heartbeat.network_state.external_address`",
                        "  - `O(K)`: decoding of length `K`",
                        "  - `O(E)`: decoding/encoding of length `E`",
                        "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                        "  `ReceivedHeartbeats`",
                        "- DbWrites: `ReceivedHeartbeats`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "pallet_im_online",
                "Heartbeat"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "network_state",
                      "type": 349,
                      "typeName": "OpaqueNetworkState",
                      "docs": [

                      ]
                    },
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_index",
                      "type": 4,
                      "typeName": "AuthIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "validators_len",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueNetworkState"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "peer_id",
                      "type": 350,
                      "typeName": "OpaquePeerId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "external_addresses",
                      "type": 351,
                      "typeName": "Vec<OpaqueMultiaddr>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 351,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 352
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "sp_core",
                "offchain",
                "OpaqueMultiaddr"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "pallet_im_online",
                "sr25519",
                "app_sr25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 354,
                      "typeName": "/*«*/ sr25519::Signature /*»*/",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 334,
                      "typeName": "[u8; 64]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "pallet_im_online",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidKey",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Non existent public key."
                      ]
                    },
                    {
                      "name": "DuplicatedHeartbeat",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicated heartbeat."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "darwinia_message_gadget",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_commitment_contract",
                      "fields": [
                        {
                          "name": "commitment_contract",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 358
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 359,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "primitives",
                "Authority"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Signer",
                  "type": 55
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signer",
                      "type": 55,
                      "typeName": "Signer",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "RingBalance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "term",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 359,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 358
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "primitives",
                "ScheduledAuthoritiesChange"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Signer",
                  "type": 55
                },
                {
                  "name": "RingBalance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "MaxMembers",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "next_authorities",
                      "type": 357,
                      "typeName": "BoundedVec<Authority<AccountId, Signer, RingBalance, BlockNumber>,\nMaxMembers>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 361,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  1,
                  362
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 52
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 51,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 285,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "primitives",
                "MmrRootToSign"
              ],
              "params": [
                {
                  "name": "MmrRoot",
                  "type": 9
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Signature",
                  "type": 53
                },
                {
                  "name": "MaxMembers",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mmr_root",
                      "type": 9,
                      "typeName": "MmrRoot",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signatures",
                      "type": 362,
                      "typeName": "BoundedVec<(AccountId, Signature), MaxMembers>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_authority",
                      "fields": [
                        {
                          "name": "stake",
                          "type": 6,
                          "typeName": "Balance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signer",
                          "type": 55,
                          "typeName": "RelayAuthoritySigner<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Request to be an authority.",
                        "",
                        "This will be failed if match one of these sections:",
                        "- already is a candidate",
                        "- already is an authority",
                        "- insufficient stake, required at least more than the last candidate's if too there're",
                        "  many candidates in the candidates' queue"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Cancel the request to be an authority.",
                        "",
                        "This will remove you from the candidates queue immediately."
                      ]
                    },
                    {
                      "name": "kill_candidates",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Remove all the candidates."
                      ]
                    },
                    {
                      "name": "add_authorities",
                      "fields": [
                        {
                          "name": "account_ids",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an authority from the candidates.",
                        "",
                        "This call is disallowed during the authorities change."
                      ]
                    },
                    {
                      "name": "renounce_authority",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Renounce the authority of the account.",
                        "",
                        "This call is disallowed during the authorities change.",
                        "No-op if can't find the authority.",
                        "Will fail if you still in the term."
                      ]
                    },
                    {
                      "name": "remove_authorities",
                      "fields": [
                        {
                          "name": "account_ids",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove the given authorities.",
                        "",
                        "This call is disallowed during the authorities change."
                      ]
                    },
                    {
                      "name": "kill_authorities",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "force_new_term",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "submit_signed_mmr_root",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 53,
                          "typeName": "RelayAuthoritySignature<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Require authority origin",
                        "",
                        "This call is disallowed during the authorities change",
                        "",
                        "No-op if already submit",
                        "",
                        "Verify",
                        "- the relay requirement is valid",
                        "- the signature is signed by the submitter"
                      ]
                    },
                    {
                      "name": "submit_signed_authorities",
                      "fields": [
                        {
                          "name": "signature",
                          "type": 53,
                          "typeName": "RelayAuthoritySignature<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Require authority origin",
                        "",
                        "This call is only allowed during the authorities change",
                        "",
                        "No-op if already submit",
                        "",
                        "Verify",
                        "- the relay requirement is valid",
                        "- the signature is signed by the submitter"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 366,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  14,
                  14
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "darwinia_relay_authority",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyMembers",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Too many members"
                      ]
                    },
                    {
                      "name": "CandidateAE",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Candidate - ALREADY EXISTED"
                      ]
                    },
                    {
                      "name": "CandidateNE",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Candidate - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "AuthorityAE",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Authority - ALREADY EXISTED"
                      ]
                    },
                    {
                      "name": "AuthorityNE",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Authority - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "AuthorityIT",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Authority - IN TERM"
                      ]
                    },
                    {
                      "name": "AuthoritiesCountTL",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Authorities Count - TOO LOW"
                      ]
                    },
                    {
                      "name": "StakeIns",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Stake - INSUFFICIENT"
                      ]
                    },
                    {
                      "name": "OnAuthoritiesChangeDis",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "On Authorities Change - DISABLED"
                      ]
                    },
                    {
                      "name": "ScheduledSignNE",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Scheduled Sign -NOT EXISTED"
                      ]
                    },
                    {
                      "name": "SignatureInv",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Signature - INVALID"
                      ]
                    },
                    {
                      "name": "TermMis",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Term - MISMATCHED"
                      ]
                    },
                    {
                      "name": "AuthoritiesMis",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Authorities - MISMATCHED"
                      ]
                    },
                    {
                      "name": "NextAuthoritiesNE",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Next Authorities - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "TooManySchedules",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Too many scheduled `MmrToSign`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 58
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 369,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 369,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 58
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 370,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  57,
                  59,
                  1,
                  371
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 61
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 60,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 372,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  63,
                  1,
                  371
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 373,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  9
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_authority",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing.",
                        "This will insert new authority into the index 0 of authorities."
                      ]
                    },
                    {
                      "name": "remove_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "swap_authority",
                      "fields": [
                        {
                          "name": "old",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap the old authority with the new authority and trigger `on_authorities_change`.",
                        "",
                        "Not allow to call while authorities is changing."
                      ]
                    },
                    {
                      "name": "submit_authorities_change_signature",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 62,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Submit the authorities change signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    },
                    {
                      "name": "submit_new_message_root_signature",
                      "fields": [
                        {
                          "name": "address",
                          "type": 58,
                          "typeName": "Address",
                          "docs": [

                          ]
                        },
                        {
                          "name": "signature",
                          "type": 62,
                          "typeName": "Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Submit the new message root signature.",
                        "",
                        "Free to submit the first-correct signature."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "darwinia_ecdsa_authority",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AuthorityExisted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The authority is already existed."
                      ]
                    },
                    {
                      "name": "TooManyAuthorities",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Too many authorities."
                      ]
                    },
                    {
                      "name": "NotAuthority",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This is not an authority."
                      ]
                    },
                    {
                      "name": "AtLeastOneAuthority",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Require at least one authority. Not allow to decrease below one."
                      ]
                    },
                    {
                      "name": "OnAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Currently, the authorities is changing."
                      ]
                    },
                    {
                      "name": "NoAuthoritiesChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Didn't find any authorities changes to sign."
                      ]
                    },
                    {
                      "name": "NoNewMessageRoot",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Didn't find any new message root to sign."
                      ]
                    },
                    {
                      "name": "BadSignature",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Failed to verify the signature."
                      ]
                    },
                    {
                      "name": "AlreadySubmitted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "This authority had already finished his duty."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 376,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 377
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 377,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  9,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 378,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  65,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "expiry",
                          "type": 59,
                          "typeName": "Option<BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "name": null,
                          "type": 381,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 66,
                      "typeName": "VoteThreshold",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "tally",
                      "type": 382,
                      "typeName": "Tally<Balance>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 384,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegations",
                          "type": 388,
                          "typeName": "Delegations<Balance>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prior",
                          "type": 389,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "conviction",
                          "type": 390,
                          "typeName": "Conviction",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delegations",
                          "type": 388,
                          "typeName": "Delegations<Balance>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prior",
                          "type": 389,
                          "typeName": "PriorLock<BlockNumber, Balance>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 384,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 385
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  386
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 387,
                          "typeName": "Vote",
                          "docs": [

                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 2,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked1x",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked2x",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked3x",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked4x",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked5x",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Locked6x",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 391,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  9,
                  66
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 392,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  65
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 146,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 146,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "vote",
                          "type": 386,
                          "typeName": "AccountVote<BalanceOf<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                        "  `FastTrackVotingPeriod` if too low.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 146,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "conviction",
                          "type": 390,
                          "typeName": "Conviction",
                          "docs": [

                          ]
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 59,
                          "typeName": "Option<ReferendumIndex>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 146,
                          "typeName": "PropIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "fields": [

                      ],
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "fields": [

                      ],
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "fields": [

                      ],
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "fields": [

                      ],
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "fields": [

                      ],
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "fields": [

                      ],
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "fields": [

                      ],
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "fields": [

                      ],
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [

                      ],
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 104,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "darwinia_runtime",
                "Call"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 147,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Babe",
                      "fields": [
                        {
                          "name": null,
                          "type": 176,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 182,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 192,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Kton",
                      "fields": [
                        {
                          "name": null,
                          "type": 196,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Kton, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "name": null,
                          "type": 204,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ElectionProviderMultiPhase",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "name": null,
                          "type": 309,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "name": null,
                          "type": 322,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 327,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ImOnline",
                      "fields": [
                        {
                          "name": null,
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "MessageGadget",
                      "fields": [
                        {
                          "name": null,
                          "type": 356,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageGadget, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 50,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaRelayAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 365,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EcdsaRelayAuthority, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EcdsaAuthority",
                      "fields": [
                        {
                          "name": null,
                          "type": 374,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EcdsaAuthority, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 51,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "name": null,
                          "type": 394,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 398,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 399,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "name": null,
                          "type": 400,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "name": null,
                          "type": 402,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 403,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KtonTreasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 404,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<KtonTreasury, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "name": null,
                          "type": 405,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 406,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 407,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "name": null,
                          "type": 408,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "name": null,
                          "type": 410,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 418,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Society",
                      "fields": [
                        {
                          "name": null,
                          "type": 458,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 460,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "name": null,
                          "type": 461,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "name": null,
                          "type": 463,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "name": null,
                          "type": 465,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EthereumRelay",
                      "fields": [
                        {
                          "name": null,
                          "type": 468,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthereumRelay, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EthereumBacking",
                      "fields": [
                        {
                          "name": null,
                          "type": 483,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthereumBacking, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeCrabGrandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 486,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgeCrabGrandpa, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BridgeCrabMessages",
                      "fields": [
                        {
                          "name": null,
                          "type": 492,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BridgeCrabMessages, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FeeMarket",
                      "fields": [
                        {
                          "name": null,
                          "type": 504,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FeeMarket, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ToCrabBacking",
                      "fields": [
                        {
                          "name": null,
                          "type": 505,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ToCrabBacking, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": null,
                          "type": 506,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 509,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BaseFee",
                      "fields": [
                        {
                          "name": null,
                          "type": 519,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 49,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prime",
                          "type": 203,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 397,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 146,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 397,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approve",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 183,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "prime",
                          "type": 203,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 397,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 146,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 397,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approve",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 183,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        },
                        {
                          "name": "length_bound",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s total balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 401,
                          "typeName": "Renouncing",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "has_replacement",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, a new phragmen election is started.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Renouncing"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RunnerUp",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "name": null,
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 146,
                          "typeName": "ProposalIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip_value",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip_value",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_bounty",
                      "fields": [
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a new bounty.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                        "or slashed when rejected.",
                        "",
                        "- `curator`: The curator account whom will manage this bounty.",
                        "- `fee`: The curator fee.",
                        "- `value`: The total payment amount of this bounty, curator fee included.",
                        "- `description`: The description of this bounty."
                      ]
                    },
                    {
                      "name": "approve_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "curator",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Assign a curator to a funded bounty.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unassign_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unassign curator from a bounty.",
                        "",
                        "This function can only be called by the `RejectOrigin` a signed origin.",
                        "",
                        "If this function is called by the `RejectOrigin`, we assume that the curator is",
                        "malicious or inactive. As a result, we will slash the curator when possible.",
                        "",
                        "If the origin is the curator, we take this as a sign they are unable to do their job and",
                        "they willingly give up. We could slash them, but for now we allow them to recover their",
                        "deposit and exit without issue. (We may want to change this if it is abused.)",
                        "",
                        "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                        "anyone in the community to call out that a curator is not doing their due diligence, and",
                        "we should pick a new curator. In this case the curator should also be slashed.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "accept_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept the curator role for a bounty.",
                        "A deposit will be reserved from curator and refund upon successful payout.",
                        "",
                        "May only be called from the curator.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "award_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                        "after a delay.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to award.",
                        "- `beneficiary`: The beneficiary account whom will receive the payout.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim the payout from an awarded bounty after payout delay.",
                        "",
                        "The dispatch origin for this call must be the beneficiary of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to claim.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                        "the curator deposit will be unreserved if possible.",
                        "",
                        "Only `T::RejectOrigin` is able to cancel a bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to cancel.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "extend_bounty_expiry",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 146,
                          "typeName": "BountyIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Extend the expiry time of an active bounty.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to extend.",
                        "- `remark`: additional information.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule",
                          "type": 409,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule",
                          "type": 409,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 411,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 411,
                          "typeName": "Vec<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 412,
                          "typeName": "Box<T::PalletsOrigin>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 411,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 397
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "darwinia_runtime",
                "OriginCaller"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "name": null,
                          "type": 413,
                          "typeName": "frame_system::Origin<Runtime>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 414,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "name": null,
                          "type": 415,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": null,
                          "type": 416,
                          "typeName": "darwinia_ethereum::Origin",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "name": null,
                          "type": 417,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "frame_system",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "_Phantom",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "_Phantom",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "darwinia_ethereum",
                "RawOrigin"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EthereumTransaction",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 419,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 453,
                          "typeName": "Vec<(T::AccountId, Data)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 146,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee",
                          "type": 47,
                          "typeName": "BalanceOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 146,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fields",
                          "type": 455,
                          "typeName": "IdentityFields",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 146,
                          "typeName": "RegistrarIndex",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "judgement",
                          "type": 457,
                          "typeName": "Judgement<BalanceOf<T>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "data",
                          "type": 422,
                          "typeName": "Data",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "data",
                          "type": 422,
                          "typeName": "Data",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 420,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "display",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "legal",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "web",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "riot",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "email",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 452,
                      "typeName": "Option<[u8; 20]>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "image",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    },
                    {
                      "name": "twitter",
                      "type": 422,
                      "typeName": "Data",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 421
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 451,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 421,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  422,
                  422
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 423,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 424,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 425,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 426,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 427,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 428,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 429,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 162,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 430,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 431,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 432,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 433,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 434,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 435,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 436,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 437,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 438,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 439,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 440,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 441,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 442,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 443,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 444,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 445,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 446,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 447,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 448,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 449,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 450,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 423,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 424,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 425,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 426,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 427,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 429,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 430,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 432,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 435,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 436,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 437,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 438,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 439,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 440,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 441,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 442,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 443,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 444,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 445,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 446,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 447,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 448,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 449,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 450,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 451,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 421
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 55
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 453,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 454
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  422
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 455,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 456
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "IdentityField",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Legal",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Web",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Riot",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Email",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PgpFingerprint",
                      "fields": [

                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Image",
                      "fields": [

                      ],
                      "index": 64,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Twitter",
                      "fields": [

                      ],
                      "index": 128,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reasonable",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "KnownGood",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "OutOfDate",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "LowQuality",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Erroneous",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A user outside of the society can make a bid for entry.",
                        "",
                        "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                        "when the bid becomes a member, or if the bid calls `unbid`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `value`: A one time payment the bid would like to receive when joining the society.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                        "- Storage Reads:",
                        "\t- One storage read to check for suspended candidate. O(1)",
                        "\t- One storage read to check for suspended member. O(1)",
                        "\t- One storage read to retrieve all current bids. O(B)",
                        "\t- One storage read to retrieve all current candidates. O(C)",
                        "\t- One storage read to retrieve all members. O(M)",
                        "- Storage Writes:",
                        "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                        "   w/ read)",
                        "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                        "- Notable Computation:",
                        "\t- O(B + C + log M) search to check user is not already a part of society.",
                        "\t- O(log B) search to insert the new bid sorted.",
                        "- External Pallet Operations:",
                        "\t- One balance reserve operation. O(X)",
                        "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                        "- Events:",
                        "\t- One event for new bid.",
                        "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                        "",
                        "Total Complexity: O(M + B + C + logM + logB + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbid",
                      "fields": [
                        {
                          "name": "pos",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bidder can remove their bid for entry into society.",
                        "By doing so, they will have their candidate deposit returned or",
                        "they will unvouch their voucher.",
                        "",
                        "Payment: The bid deposit is unreserved if the user made a bid.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a bidder.",
                        "",
                        "Parameters:",
                        "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), X (balance unreserve)",
                        "- One storage read and write to retrieve and update the bids. O(B)",
                        "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(B + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vouch",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "As a member, vouch for someone to join society by placing a bid on their behalf.",
                        "",
                        "There is no deposit required to vouch for a new bid, but a member can only vouch for",
                        "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                        "the suspension judgement origin, the member will be banned from vouching again.",
                        "",
                        "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                        "be paid as a portion of the reward the member will receive for joining the society.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `who`: The user who you would like to vouch for.",
                        "- `value`: The total reward to be paid between you and the candidate if they become",
                        "a member in the society.",
                        "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                        "the society. Tips larger than `value` will be saturated upon payout.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), C (len of candidates), M (len of members)",
                        "- Storage Reads:",
                        "\t- One storage read to retrieve all members. O(M)",
                        "\t- One storage read to check member is not already vouching. O(1)",
                        "\t- One storage read to check for suspended candidate. O(1)",
                        "\t- One storage read to check for suspended member. O(1)",
                        "\t- One storage read to retrieve all current bids. O(B)",
                        "\t- One storage read to retrieve all current candidates. O(C)",
                        "- Storage Writes:",
                        "\t- One storage write to insert vouching status to the member. O(1)",
                        "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                        "   w/ read)",
                        "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                        "- Notable Computation:",
                        "\t- O(log M) search to check sender is a member.",
                        "\t- O(B + C + log M) search to check user is not already a part of society.",
                        "\t- O(log B) search to insert the new bid sorted.",
                        "- External Pallet Operations:",
                        "\t- One balance reserve operation. O(X)",
                        "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                        "- Events:",
                        "\t- One event for vouch.",
                        "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                        "",
                        "Total Complexity: O(M + B + C + logM + logB + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unvouch",
                      "fields": [
                        {
                          "name": "pos",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "As a vouching member, unvouch a bid. This only works while vouched user is",
                        "only a bidder (and not a candidate).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a vouching member.",
                        "",
                        "Parameters:",
                        "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids)",
                        "- One storage read O(1) to check the signer is a vouching member.",
                        "- One storage mutate to retrieve and update the bids. O(B)",
                        "- One vouching storage removal. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(B)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 193,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": [

                          ]
                        },
                        {
                          "name": "approve",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "As a member, vote on a candidate.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `candidate`: The candidate that the member would like to bid on.",
                        "- `approve`: A boolean which says if the candidate should be approved (`true`) or",
                        "  rejected (`false`).",
                        "",
                        "# <weight>",
                        "Key: C (len of candidates), M (len of members)",
                        "- One storage read O(M) and O(log M) search to check user is a member.",
                        "- One account lookup.",
                        "- One storage read O(C) and O(C) search to check that user is a candidate.",
                        "- One storage write to add vote to votes. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(M + logM + C)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "defender_vote",
                      "fields": [
                        {
                          "name": "approve",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "As a member, vote on the defender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `approve`: A boolean which says if the candidate should be",
                        "approved (`true`) or rejected (`false`).",
                        "",
                        "# <weight>",
                        "- Key: M (len of members)",
                        "- One storage read O(M) and O(log M) search to check user is a member.",
                        "- One storage write to add vote to votes. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(M + logM)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "payout",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Transfer the first matured payout for the sender and remove it from the records.",
                        "",
                        "NOTE: This extrinsic needs to be called multiple times to claim multiple matured",
                        "payouts.",
                        "",
                        "Payment: The member will receive a payment equal to their first matured",
                        "payout to their free balance.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member with",
                        "payouts remaining.",
                        "",
                        "# <weight>",
                        "Key: M (len of members), P (number of payouts for a particular member)",
                        "- One storage read O(M) and O(log M) search to check signer is a member.",
                        "- One storage read O(P) to get all payouts for a member.",
                        "- One storage read O(1) to get the current block number.",
                        "- One currency transfer call. O(X)",
                        "- One storage write or removal to update the member's payouts. O(P)",
                        "",
                        "Total Complexity: O(M + logM + P + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "found",
                      "fields": [
                        {
                          "name": "founder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_members",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rules",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Found the society.",
                        "",
                        "This is done as a discrete action in order to allow for the",
                        "pallet to be included into a running chain and can only be done once.",
                        "",
                        "The dispatch origin for this call must be from the _FounderSetOrigin_.",
                        "",
                        "Parameters:",
                        "- `founder` - The first member and head of the newly founded society.",
                        "- `max_members` - The initial max number of members for the society.",
                        "- `rules` - The rules of this society concerning membership.",
                        "",
                        "# <weight>",
                        "- Two storage mutates to set `Head` and `Founder`. O(1)",
                        "- One storage write to add the first member to society. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unfound",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Annul the founding of the society.",
                        "",
                        "The dispatch origin for this call must be Signed, and the signing account must be both",
                        "the `Founder` and the `Head`. This implies that it may only be done when there is one",
                        "member.",
                        "",
                        "# <weight>",
                        "- Two storage reads O(1).",
                        "- Four storage removals O(1).",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "judge_suspended_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "forgive",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow suspension judgement origin to make judgement on a suspended member.",
                        "",
                        "If a suspended member is forgiven, we simply add them back as a member, not affecting",
                        "any of the existing storage items for that member.",
                        "",
                        "If a suspended member is rejected, remove all associated storage items, including",
                        "their payouts, and remove any vouched bids they currently have.",
                        "",
                        "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                        "",
                        "Parameters:",
                        "- `who` - The suspended member to be judged.",
                        "- `forgive` - A boolean representing whether the suspension judgement origin forgives",
                        "  (`true`) or rejects (`false`) a suspended member.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), M (len of members)",
                        "- One storage read to check `who` is a suspended member. O(1)",
                        "- Up to one storage write O(M) with O(log M) binary search to add a member back to",
                        "  society.",
                        "- Up to 3 storage removals O(1) to clean up a removed member.",
                        "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                        "- Up to one additional event if unvouch takes place.",
                        "- One storage removal. O(1)",
                        "- One event for the judgement.",
                        "",
                        "Total Complexity: O(M + logM + B)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "judge_suspended_candidate",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "judgement",
                          "type": 459,
                          "typeName": "Judgement",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Allow suspended judgement origin to make judgement on a suspended candidate.",
                        "",
                        "If the judgement is `Approve`, we add them to society as a member with the appropriate",
                        "payment for joining society.",
                        "",
                        "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                        "to the society treasury, or we ban the voucher from vouching again.",
                        "",
                        "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                        "through the induction process again.",
                        "",
                        "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                        "",
                        "Parameters:",
                        "- `who` - The suspended candidate to be judged.",
                        "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), M (len of members), X (balance action)",
                        "- One storage read to check `who` is a suspended candidate.",
                        "- One storage removal of the suspended candidate.",
                        "- Approve Logic",
                        "\t- One storage read to get the available pot to pay users with. O(1)",
                        "\t- One storage write to update the available pot. O(1)",
                        "\t- One storage read to get the current block number. O(1)",
                        "\t- One storage read to get all members. O(M)",
                        "\t- Up to one unreserve currency action.",
                        "\t- Up to two new storage writes to payouts.",
                        "\t- Up to one storage write with O(log M) binary search to add a member to society.",
                        "- Reject Logic",
                        "\t- Up to one repatriate reserved currency action. O(X)",
                        "\t- Up to one storage write to ban the vouching member from vouching again.",
                        "- Rebid Logic",
                        "\t- Storage mutate with O(log B) binary search to place the user back into bids.",
                        "- Up to one additional event if unvouch takes place.",
                        "- One storage removal.",
                        "- One event for the judgement.",
                        "",
                        "Total Complexity: O(M + logM + B + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_members",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allows root origin to change the maximum number of members in society.",
                        "Max membership count must be greater than 1.",
                        "",
                        "The dispatch origin for this call must be from _ROOT_.",
                        "",
                        "Parameters:",
                        "- `max` - The maximum number of members for the society.",
                        "",
                        "# <weight>",
                        "- One storage write to update the max. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "pallet_society",
                "Judgement"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Rebid",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reject",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Approve",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account.",
                        "",
                        "# <weight>",
                        "- The weight of the `call` + 10,000.",
                        "- One storage lookup to check account is recovered by `who`. O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set an a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account.",
                        "",
                        "# <weight>",
                        "- One storage write O(1)",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "threshold",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered.",
                        "",
                        "# <weight>",
                        "- Key: F (len of friends)",
                        "- One storage read to check that account is not already recoverable. O(1).",
                        "- A check that the friends list is sorted and unique. O(F)",
                        "- One currency reserve operation. O(X)",
                        "- One storage write. O(1). Codec O(F).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration).",
                        "",
                        "# <weight>",
                        "- One storage read to check that account is recoverable. O(F)",
                        "- One storage read to check that this recovery process hasn't already started. O(1)",
                        "- One currency reserve operation. O(X)",
                        "- One storage read to get the current block number. O(1)",
                        "- One storage write. O(1).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process.",
                        "",
                        "# <weight>",
                        "Key: F (len of friends in config), V (len of vouching friends)",
                        "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                        "- One storage read to get the active recovery process. O(1), Codec O(V)",
                        "- One binary search to confirm caller is a friend. O(logF)",
                        "- One binary search to confirm caller has not already vouched. O(logV)",
                        "- One storage write. O(1), Codec O(V).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + logF + V + logV)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you.",
                        "",
                        "# <weight>",
                        "Key: F (len of friends in config), V (len of vouching friends)",
                        "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                        "- One storage read to get the active recovery process. O(1), Codec O(V)",
                        "- One storage read to get the current block number. O(1)",
                        "- One storage write. O(1), Codec O(V).",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + V)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account.",
                        "",
                        "# <weight>",
                        "Key: V (len of vouching friends)",
                        "- One storage read/remove to get the active recovery process. O(1), Codec O(V)",
                        "- One balance call to repatriate reserved. O(X)",
                        "- One event.",
                        "",
                        "Total Complexity: O(V + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration).",
                        "",
                        "# <weight>",
                        "Key: F (len of friends)",
                        "- One storage read to get the prefix iterator for active recoveries. O(1)",
                        "- One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
                        "- One balance call to unreserved. O(X)",
                        "- One event.",
                        "",
                        "Total Complexity: O(F + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of.",
                        "",
                        "# <weight>",
                        "- One storage mutation to check account is recovered by `who`. O(1)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 462,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 462,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 462,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 462,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 86
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 86,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 464,
                          "typeName": "Option<T::ProxyType>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proxy_type",
                          "type": 89,
                          "typeName": "T::ProxyType",
                          "docs": [

                          ]
                        },
                        {
                          "name": "index",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "height",
                          "type": 146,
                          "typeName": "T::BlockNumber",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ext_index",
                          "type": 146,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 464,
                          "typeName": "Option<T::ProxyType>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 89
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 89,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 397,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "# <weight>",
                        "O(Z + C) where Z is the length of the call and C its execution weight.",
                        "-------------------------------",
                        "- DB Weight: None",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "other_signatories",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 466,
                          "typeName": "Option<Timepoint<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call",
                          "type": 467,
                          "typeName": "OpaqueCall<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "store_call",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "# <weight>",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "-------------------------------",
                        "- DB Weight:",
                        "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "other_signatories",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 466,
                          "typeName": "Option<Timepoint<T::BlockNumber>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account]",
                        "    - Write: Multisig Storage, [Caller Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 90,
                          "typeName": "u16",
                          "docs": [

                          ]
                        },
                        {
                          "name": "other_signatories",
                          "type": 65,
                          "typeName": "Vec<T::AccountId>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "timepoint",
                          "type": 92,
                          "typeName": "Timepoint<T::BlockNumber>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 92
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 92,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperKeepOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 397
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 146,
                      "typeName": null,
                      "docs": [

                      ]
                    },
                    {
                      "name": null,
                      "type": 397,
                      "typeName": "T",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "affirm",
                      "fields": [
                        {
                          "name": "ethereum_relay_header_parcel",
                          "type": 469,
                          "typeName": "/*«*/ EthereumRelayHeaderParcel /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "optional_ethereum_relay_proofs",
                          "type": 470,
                          "typeName": "/*«*/ Option<EthereumRelayProofs> /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispute_and_affirm",
                      "fields": [
                        {
                          "name": "ethereum_relay_header_parcel",
                          "type": 469,
                          "typeName": "/*«*/ EthereumRelayHeaderParcel /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "optional_ethereum_relay_proofs",
                          "type": 470,
                          "typeName": "/*«*/ Option<EthereumRelayProofs> /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "complete_relay_proofs",
                      "fields": [
                        {
                          "name": "affirmation_id",
                          "type": 94,
                          "typeName": "/*«*/ RelayAffirmationId<EthereumBlockNumber> /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ethereum_relay_proofs",
                          "type": 478,
                          "typeName": "/*«*/ Vec<EthereumRelayProofs> /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "extend_affirmation",
                      "fields": [
                        {
                          "name": "extended_ethereum_relay_affirmation_id",
                          "type": 94,
                          "typeName": "/*«*/ RelayAffirmationId<EthereumBlockNumber> /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "game_sample_points",
                          "type": 479,
                          "typeName": "/*«*/ Vec<EthereumRelayHeaderParcel> /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "optional_ethereum_relay_proofs",
                          "type": 480,
                          "typeName": "/*«*/ Option<Vec<EthereumRelayProofs>> /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "vote_pending_relay_header_parcel",
                      "fields": [
                        {
                          "name": "ethereum_block_number",
                          "type": 8,
                          "typeName": "/*«*/ EthereumBlockNumber /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "aye",
                          "type": 30,
                          "typeName": "/*«*/ bool /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "check_receipt",
                      "fields": [
                        {
                          "name": "ethereum_proof_record",
                          "type": 481,
                          "typeName": "/*«*/ EthereumReceiptProof /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ethereum_header",
                          "type": 106,
                          "typeName": "/*«*/ EthereumHeader /*»*/",
                          "docs": [

                          ]
                        },
                        {
                          "name": "mmr_proof",
                          "type": 482,
                          "typeName": "/*«*/ MMRProof /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Check and verify the receipt",
                        "",
                        "`check_receipt` will verify the validation of the ethereum receipt proof from ethereum.",
                        "Ethereum receipt proof are constructed with 3 parts.",
                        "",
                        "The first part `ethereum_proof_record` is the Ethereum receipt and its merkle member proof regarding",
                        "to the receipt root in related Ethereum block header.",
                        "",
                        "The second part `ethereum_header` is the Ethereum block header which included/generated this",
                        "receipt, we need to provide this as part of proof, because in Darwinia Relay, we only have",
                        "last confirmed block's MMR root, don't have previous blocks, so we need to include this to",
                        "provide the `receipt_root` inside it, we will need to verify validation by checking header hash.",
                        "",
                        "The third part `mmr_proof` is the mmr proof generate according to",
                        "`(member_index=[ethereum_header.number], last_index=last_confirmed_block_header.number)`",
                        "it can prove that the `ethereum_header` is the chain which is committed by last confirmed block's `mmr_root`",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- Limited Storage reads",
                        "- Up to one event",
                        "",
                        "Related functions:",
                        "",
                        "  - `set_receipt_verify_fee` can be used to set the verify fee for each receipt check.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_receipt_verify_fee",
                      "fields": [
                        {
                          "name": "new",
                          "type": 47,
                          "typeName": "/*«*/ RingBalance<T> /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set verify receipt fee",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage write",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_confirmed_parcel_of",
                      "fields": [
                        {
                          "name": "confirmed_block_number",
                          "type": 8,
                          "typeName": "/*«*/ EthereumBlockNumber /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove the specific malicous confirmed parcel"
                      ]
                    },
                    {
                      "name": "clean_confirmed_parcels",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Caution: the genesis parcel will be removed too"
                      ]
                    },
                    {
                      "name": "set_confirmed_parcel",
                      "fields": [
                        {
                          "name": "ethereum_relay_header_parcel",
                          "type": 469,
                          "typeName": "/*«*/ EthereumRelayHeaderParcel /*»*/",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchable calls.",
                "",
                "Each variant of this enum maps to a dispatchable function from the associated module."
              ]
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "EthereumRelayHeaderParcel"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 106,
                      "typeName": "EthereumHeader",
                      "docs": [

                      ]
                    },
                    {
                      "name": "parent_mmr_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 471
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 471,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "EthereumRelayProofs"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ethash_proof",
                      "type": 472,
                      "typeName": "Vec<EthashProof>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mmr_proof",
                      "type": 104,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 472,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 473
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "ethereum_primitives",
                "ethashproof",
                "EthashProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dag_nodes",
                      "type": 474,
                      "typeName": "[H512; 2]",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proof",
                      "type": 476,
                      "typeName": "Vec<H128>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 474,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 2,
                  "type": 475
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "primitive_types",
                "H512"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 334,
                      "typeName": "[u8; /*«*/ 64 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 476,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 477
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H128"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 34,
                      "typeName": "[u8; /*«*/ 16 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 478,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 471
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 479,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 469
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 478
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 478,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "ethereum_primitives",
                "receipt",
                "ReceiptProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proof",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "header_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "MMRProof"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "member_leaf_index",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_leaf_index",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proof",
                      "type": 104,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "to_ethereum_backing",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "act",
                          "type": 484,
                          "typeName": "RedeemFor",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 485,
                          "typeName": "EthereumReceiptProofThing<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Redeem balances",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "lock",
                      "fields": [
                        {
                          "name": "ring_to_lock",
                          "type": 47,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "kton_to_lock",
                          "type": 47,
                          "typeName": "KtonBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "ethereum_account",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Lock some balances into the module account",
                        "which very similar to lock some assets into the contract on ethereum side",
                        "",
                        "This might kill the account just like `balances::transfer`"
                      ]
                    },
                    {
                      "name": "sync_authorities_change",
                      "fields": [
                        {
                          "name": "proof",
                          "type": 485,
                          "typeName": "EthereumReceiptProofThing<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_token_redeem_address",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set a new ring redeem address.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `new`: The new ring redeem address.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_deposit_redeem_address",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set a new deposit redeem address.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `new`: The new deposit redeem address.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_set_authorities_address",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_ring_token_address",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_kton_token_address",
                      "fields": [
                        {
                          "name": "new",
                          "type": 58,
                          "typeName": "EthereumAddress",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_redeem_status",
                      "fields": [
                        {
                          "name": "status",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "to_ethereum_backing",
                "pallet",
                "RedeemFor"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Token",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 485,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  106,
                  481,
                  482
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_finality_proof",
                      "fields": [
                        {
                          "name": "finality_target",
                          "type": 178,
                          "typeName": "Box<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "justification",
                          "type": 487,
                          "typeName": "GrandpaJustification<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Verify a target header is finalized according to the given finality proof.",
                        "",
                        "It will use the underlying storage pallet to fetch information about the current",
                        "authorities and best finalized header in order to verify that the header is finalized.",
                        "",
                        "If successful in verification, it will write the target header to the underlying storage",
                        "pallet."
                      ]
                    },
                    {
                      "name": "initialize",
                      "fields": [
                        {
                          "name": "init_data",
                          "type": 491,
                          "typeName": "super::InitializationData<BridgedHeader<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Bootstrap the bridge pallet with an initial header and authority set from which to sync.",
                        "",
                        "The initial configuration provided does not need to be the genesis header of the bridged",
                        "chain, it can be any arbitrary header. You can also provide the next scheduled set",
                        "change if it is already know.",
                        "",
                        "This function is only allowed to be called from a trusted origin and writes to storage",
                        "with practically no checks in terms of the validity of the data. It is important that",
                        "you ensure that valid data is being passed in."
                      ]
                    },
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 203,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operational",
                      "fields": [
                        {
                          "name": "operational",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Halt or resume all pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "bp_header_chain",
                "justification",
                "GrandpaJustification"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 178
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "commit",
                      "type": 488,
                      "typeName": "finality_grandpa::Commit<Header::Hash, Header::Number,\nAuthoritySignature, AuthorityId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "votes_ancestries",
                      "type": 205,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "finality_grandpa",
                "Commit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 332
                },
                {
                  "name": "Id",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": [

                      ]
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": [

                      ]
                    },
                    {
                      "name": "precommits",
                      "type": 489,
                      "typeName": "Vec<SignedPrecommit<H, N, S, Id>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 489,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 490
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "finality_grandpa",
                "SignedPrecommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": 332
                },
                {
                  "name": "Id",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "precommit",
                      "type": 337,
                      "typeName": "Precommit<H, N>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 332,
                      "typeName": "S",
                      "docs": [

                      ]
                    },
                    {
                      "name": "id",
                      "type": 39,
                      "typeName": "Id",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "bp_header_chain",
                "InitializationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 178
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 178,
                      "typeName": "Box<H>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "authority_list",
                      "type": 37,
                      "typeName": "AuthorityList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "is_halted",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_owner",
                      "fields": [
                        {
                          "name": "new_owner",
                          "type": 203,
                          "typeName": "Option<T::AccountId>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Change `PalletOwner`.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "set_operating_mode",
                      "fields": [
                        {
                          "name": "operating_mode",
                          "type": 493,
                          "typeName": "OperatingMode",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Halt or resume all/some pallet operations.",
                        "",
                        "May only be called either by root, or by `PalletOwner`."
                      ]
                    },
                    {
                      "name": "update_pallet_parameter",
                      "fields": [
                        {
                          "name": "parameter",
                          "type": 118,
                          "typeName": "T::Parameter",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update pallet parameter.",
                        "",
                        "May only be called either by root, or by `PalletOwner`.",
                        "",
                        "The weight is: single read for permissions check + 2 writes for parameter value and",
                        "event."
                      ]
                    },
                    {
                      "name": "send_message",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "payload",
                          "type": 494,
                          "typeName": "T::OutboundPayload",
                          "docs": [

                          ]
                        },
                        {
                          "name": "delivery_and_dispatch_fee",
                          "type": 6,
                          "typeName": "T::OutboundMessageFee",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Send message over lane."
                      ]
                    },
                    {
                      "name": "increase_message_fee",
                      "fields": [
                        {
                          "name": "lane_id",
                          "type": 14,
                          "typeName": "LaneId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 8,
                          "typeName": "MessageNonce",
                          "docs": [

                          ]
                        },
                        {
                          "name": "additional_fee",
                          "type": 6,
                          "typeName": "T::OutboundMessageFee",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Pay additional fee for the message."
                      ]
                    },
                    {
                      "name": "receive_messages_proof",
                      "fields": [
                        {
                          "name": "relayer_id_at_bridged_chain",
                          "type": 0,
                          "typeName": "T::InboundRelayer",
                          "docs": [

                          ]
                        },
                        {
                          "name": "proof",
                          "type": 501,
                          "typeName": "MessagesProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "messages_count",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "dispatch_weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Receive messages proof from bridged chain.",
                        "",
                        "The weight of the call assumes that the transaction always brings outbound lane",
                        "state update. Because of that, the submitter (relayer) has no benefit of not including",
                        "this data in the transaction, so reward confirmations lags should be minimal."
                      ]
                    },
                    {
                      "name": "receive_messages_delivery_proof",
                      "fields": [
                        {
                          "name": "proof",
                          "type": 502,
                          "typeName": "MessagesDeliveryProofOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relayers_state",
                          "type": 503,
                          "typeName": "UnrewardedRelayersState",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Receive messages delivery proof from bridged chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "bp_messages",
                "OperatingMode"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "RejectingOutboundMessages",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 494,
            "type": {
              "path": [
                "bp_message_dispatch",
                "MessagePayload"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 495
                },
                {
                  "name": "TargetChainSignature",
                  "type": 498
                },
                {
                  "name": "Call",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "SpecVersion",
                      "docs": [

                      ]
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 499,
                      "typeName": "CallOrigin<SourceChainAccountId, TargetChainAccountPublic,\nTargetChainSignature>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "dispatch_fee_payment",
                      "type": 500,
                      "typeName": "DispatchFeePayment",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 10,
                      "typeName": "Call",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 495,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "ed25519::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "sr25519::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 496,
                          "typeName": "ecdsa::Public",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 497,
                      "typeName": "[u8; 33]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 497,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 333,
                          "typeName": "ed25519::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 354,
                          "typeName": "sr25519::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "ecdsa::Signature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 499,
            "type": {
              "path": [
                "bp_message_dispatch",
                "CallOrigin"
              ],
              "params": [
                {
                  "name": "SourceChainAccountId",
                  "type": 0
                },
                {
                  "name": "TargetChainAccountPublic",
                  "type": 495
                },
                {
                  "name": "TargetChainSignature",
                  "type": 498
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SourceRoot",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "TargetAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 495,
                          "typeName": "TargetChainAccountPublic",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 498,
                          "typeName": "TargetChainSignature",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "SourceAccount",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "SourceChainAccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "bp_runtime",
                "messages",
                "DispatchFeePayment"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AtSourceChain",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "AtTargetChain",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "target",
                "FromBridgedChainMessagesProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 9,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 107,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_start",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonces_end",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 502,
            "type": {
              "path": [
                "bridge_runtime_common",
                "messages",
                "source",
                "FromBridgedChainMessagesDeliveryProof"
              ],
              "params": [
                {
                  "name": "BridgedHeaderHash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bridged_header_hash",
                      "type": 9,
                      "typeName": "BridgedHeaderHash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "storage_proof",
                      "type": 107,
                      "typeName": "RawStorageProof",
                      "docs": [

                      ]
                    },
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayersState"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "unrewarded_relayer_entries",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages_in_oldest_entry",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "total_messages",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "enroll_and_lock_collateral",
                      "fields": [
                        {
                          "name": "lock_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "relay_fee",
                          "type": 127,
                          "typeName": "Option<BalanceOf<T, I>>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Any accounts can enroll to be a relayer by lock collateral. The relay fee is optional,",
                        "the default value is MinimumRelayFee in runtime. (Update market needed)",
                        "Note: One account can enroll only once."
                      ]
                    },
                    {
                      "name": "update_locked_collateral",
                      "fields": [
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update locked collateral for enrolled relayer, only supporting lock more. (Update market",
                        "needed)"
                      ]
                    },
                    {
                      "name": "update_relay_fee",
                      "fields": [
                        {
                          "name": "new_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Update relay fee for enrolled relayer. (Update market needed)"
                      ]
                    },
                    {
                      "name": "cancel_enrollment",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cancel enrolled relayer(Update market needed)"
                      ]
                    },
                    {
                      "name": "set_slash_protect",
                      "fields": [
                        {
                          "name": "slash_protect",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_assigned_relayers_number",
                      "fields": [
                        {
                          "name": "number",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 505,
            "type": {
              "path": [
                "to_substrate_backing",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_and_remote_create",
                      "fields": [
                        {
                          "name": "spec_version",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "lock_and_remote_issue",
                      "fields": [
                        {
                          "name": "spec_version",
                          "type": 4,
                          "typeName": "u32",
                          "docs": [

                          ]
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 47,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "fee",
                          "type": 47,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Lock token in this chain and cross transfer to the target chain",
                        "",
                        "Target is the id of the target chain defined in s2s_chain pallet"
                      ]
                    },
                    {
                      "name": "unlock_from_remote",
                      "fields": [
                        {
                          "name": "token_address",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "amount",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "recipient",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Receive target chain locked message and unlock token in this chain."
                      ]
                    },
                    {
                      "name": "set_secure_limited_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_security_limitation_ring_amount",
                      "fields": [
                        {
                          "name": "limitation",
                          "type": 6,
                          "typeName": "RingBalance<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_remote_mapping_token_factory_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountId<T>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "call",
                      "fields": [
                        {
                          "name": "source",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "target",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 507,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                      ]
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "source",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 507,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue an EVM create operation. This is similar to a contract creation transaction in",
                        "Ethereum."
                      ]
                    },
                    {
                      "name": "create2",
                      "fields": [
                        {
                          "name": "source",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "init",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "salt",
                          "type": 9,
                          "typeName": "H256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "value",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "gas_limit",
                          "type": 8,
                          "typeName": "u64",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_fee_per_gas",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        },
                        {
                          "name": "max_priority_fee_per_gas",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 108,
                          "typeName": "Option<U256>",
                          "docs": [

                          ]
                        },
                        {
                          "name": "access_list",
                          "type": 507,
                          "typeName": "Vec<(H160, Vec<H256>)>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Issue an EVM create2 operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 507,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 508
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 508,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  58,
                  104
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 509,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 510,
                          "typeName": "Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "This the endpoint of RPC Ethereum transaction, consistent with frontier."
                      ]
                    },
                    {
                      "name": "message_transact",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 510,
                          "typeName": "Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "This is message transact only for substrate to substrate LCMP to call"
                      ]
                    },
                    {
                      "name": "root_transact",
                      "fields": [
                        {
                          "name": "target",
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        },
                        {
                          "name": "input",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Internal transaction only for root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionV2"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 511,
                          "typeName": "LegacyTransaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 515,
                          "typeName": "EIP2930Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 518,
                          "typeName": "EIP1559Transaction",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "LegacyTransaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 512,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "signature",
                      "type": 513,
                      "typeName": "TransactionSignature",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 512,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionAction"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": "H160",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Create",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionSignature"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "v",
                      "type": 514,
                      "typeName": "TransactionRecoveryId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 514,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "TransactionRecoveryId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP2930Transaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_price",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 512,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 516,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 516,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 517
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 517,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "AccessListItem"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "address",
                      "type": 58,
                      "typeName": "Address",
                      "docs": [

                      ]
                    },
                    {
                      "name": "slots",
                      "type": 104,
                      "typeName": "Vec<H256>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "ethereum",
                "transaction",
                "EIP1559Transaction"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "max_fee_per_gas",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "action",
                      "type": 512,
                      "typeName": "TransactionAction",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "input",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "access_list",
                      "type": 516,
                      "typeName": "AccessList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "odd_y_parity",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    },
                    {
                      "name": "r",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "s",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "pallet_base_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_base_fee_per_gas",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 98,
                          "typeName": "U256",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_is_active",
                      "fields": [
                        {
                          "name": "is_active",
                          "type": 30,
                          "typeName": "bool",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_elasticity",
                      "fields": [
                        {
                          "name": "elasticity",
                          "type": 142,
                          "typeName": "Permill",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 520,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ayes",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nays",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 521,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 523,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 524
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 524,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "SeatHolder"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 525,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Voter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 526,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Must vote for at least one candidate."
                      ]
                    },
                    {
                      "name": "TooManyVotes",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Cannot vote more than candidates."
                      ]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Cannot vote more than maximum allowed."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Voter can not pay voting bond."
                      ]
                    },
                    {
                      "name": "MustBeVoter",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Must be a voter."
                      ]
                    },
                    {
                      "name": "ReportSelf",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Cannot report self."
                      ]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Duplicated candidate submission."
                      ]
                    },
                    {
                      "name": "MemberSubmit",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Member cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Runner cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Candidate does not have enough funds."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 528,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 529,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 285,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 530,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 162,
                      "typeName": "[u8; 8]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 531,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 532,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 533,
            "type": {
              "path": [
                "pallet_tips",
                "OpenTip"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "closes",
                      "type": 59,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "tips",
                      "type": 72,
                      "typeName": "Vec<(AccountId, Balance)>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "finders_fee",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 534,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "AlreadyKnown",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The tip was already found/started."
                      ]
                    },
                    {
                      "name": "UnknownTip",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The tip hash is unknown."
                      ]
                    },
                    {
                      "name": "NotFinder",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The account attempting to retract the tip is not the finder of the tip."
                      ]
                    },
                    {
                      "name": "StillOpen",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The tip cannot be claimed/closed because there are not enough tippers yet."
                      ]
                    },
                    {
                      "name": "Premature",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The tip cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "pallet_bounties",
                "Bounty"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "curator_deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "status",
                      "type": 536,
                      "typeName": "BountyStatus<AccountId, BlockNumber>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 536,
            "type": {
              "path": [
                "pallet_bounties",
                "BountyStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Funded",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "CuratorProposed",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "update_due",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": "unlock_at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 537,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "ReasonTooBig",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "UnexpectedStatus",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The bounty status is unexpected."
                      ]
                    },
                    {
                      "name": "RequireCurator",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Require bounty curator."
                      ]
                    },
                    {
                      "name": "InvalidValue",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Invalid bounty value."
                      ]
                    },
                    {
                      "name": "InvalidFee",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid bounty fee."
                      ]
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "A bounty payout is pending.",
                        "To cancel the bounty, you must unassign and slash the curator."
                      ]
                    },
                    {
                      "name": "Premature",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The bounties cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 409
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 540,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 540,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 409
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 541,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V1",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 542,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 543,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 545,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "info",
                      "type": 419,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 545,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 546
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 547,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 546,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  457
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 547,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 546
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 548,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  549
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 549,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 65,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 550,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 551
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 553,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 551,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 552
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 552,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fields",
                      "type": 455,
                      "typeName": "IdentityFields",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 553,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 551
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 554,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 555,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 556
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 556,
            "type": {
              "path": [
                "pallet_society",
                "Bid"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "kind",
                      "type": 557,
                      "typeName": "BidKind<AccountId, Balance>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 557,
            "type": {
              "path": [
                "pallet_society",
                "BidKind"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Vouch",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": [

                          ]
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 558,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  557
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 559,
            "type": {
              "path": [
                "pallet_society",
                "VouchingStatus"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Vouching",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Banned",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 560,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 561
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 561,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 562,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  0
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 563,
            "type": {
              "path": [
                "pallet_society",
                "Vote"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Skeptic",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Reject",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Approve",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 564,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadPosition",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "An incorrect position was provided."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "User is not a member."
                      ]
                    },
                    {
                      "name": "AlreadyMember",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "User is already a member."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "User is suspended."
                      ]
                    },
                    {
                      "name": "NotSuspended",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "User is not suspended."
                      ]
                    },
                    {
                      "name": "NoPayout",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Nothing to payout."
                      ]
                    },
                    {
                      "name": "AlreadyFounded",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Society already founded."
                      ]
                    },
                    {
                      "name": "InsufficientPot",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Not enough in pot to accept candidate."
                      ]
                    },
                    {
                      "name": "AlreadyVouching",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Member is already vouching or banned from vouching again."
                      ]
                    },
                    {
                      "name": "NotVouching",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Member is not vouching."
                      ]
                    },
                    {
                      "name": "Head",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Cannot remove the head of the chain."
                      ]
                    },
                    {
                      "name": "Founder",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Cannot remove the founder."
                      ]
                    },
                    {
                      "name": "AlreadyBid",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "User has already made a bid."
                      ]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "User is already a candidate."
                      ]
                    },
                    {
                      "name": "NotCandidate",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "User is not a candidate."
                      ]
                    },
                    {
                      "name": "MaxMembers",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Too many members in the society."
                      ]
                    },
                    {
                      "name": "NotFounder",
                      "fields": [

                      ],
                      "index": 16,
                      "docs": [
                        "The caller is not the founder."
                      ]
                    },
                    {
                      "name": "NotHead",
                      "fields": [

                      ],
                      "index": 17,
                      "docs": [
                        "The caller is not the head."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 565,
            "type": {
              "path": [
                "pallet_recovery",
                "RecoveryConfig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "friends",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "threshold",
                      "type": 90,
                      "typeName": "u16",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 566,
            "type": {
              "path": [
                "pallet_recovery",
                "ActiveRecovery"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "friends",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 567,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "User is not allowed to make a call on behalf of this account"
                      ]
                    },
                    {
                      "name": "ZeroThreshold",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Threshold must be greater than zero"
                      ]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Friends list must be greater than zero and threshold"
                      ]
                    },
                    {
                      "name": "MaxFriends",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Friends list must be less than max friends"
                      ]
                    },
                    {
                      "name": "NotSorted",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Friends list must be sorted and free of duplicates"
                      ]
                    },
                    {
                      "name": "NotRecoverable",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "This account is not set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyStarted",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "A recovery process has already started for this account"
                      ]
                    },
                    {
                      "name": "NotStarted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "A recovery process has not started for this rescuer"
                      ]
                    },
                    {
                      "name": "NotFriend",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "This account is not a friend who can vouch"
                      ]
                    },
                    {
                      "name": "DelayPeriod",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The friend must wait until the delay period to vouch for this recovery"
                      ]
                    },
                    {
                      "name": "AlreadyVouched",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "This user has already vouched for this recovery"
                      ]
                    },
                    {
                      "name": "Threshold",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "The threshold for recovering this account has not been met"
                      ]
                    },
                    {
                      "name": "StillActive",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "There are still active recovery attempts that need to be closed"
                      ]
                    },
                    {
                      "name": "AlreadyProxy",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [

                      ],
                      "index": 15,
                      "docs": [
                        "Some internal state is broken."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 568,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 569
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 569,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 570
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 570,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 570,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV2"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 397
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 412
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 87,
                      "typeName": "Option<Vec<u8>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call",
                      "type": 397,
                      "typeName": "Call",
                      "docs": [

                      ]
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 462,
                      "typeName": "Option<schedule::Period<BlockNumber>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "origin",
                      "type": 412,
                      "typeName": "PalletsOrigin",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 571,
            "type": {
              "path": [
                "pallet_scheduler",
                "Releases"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "V2",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 572,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 573,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  574,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 574,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 575
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 576,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 575,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 89
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "proxy_type",
                      "type": 89,
                      "typeName": "ProxyType",
                      "docs": [

                      ]
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 576,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 575
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 577,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  578,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 578,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 579
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 580,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 579,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash",
                      "docs": [

                      ]
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 580,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 579
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 581,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 582,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  0,
                  1
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 583,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 92,
                      "typeName": "Timepoint<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "approvals",
                      "type": 65,
                      "typeName": "Vec<AccountId>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 584,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  467,
                  0,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 585,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 586,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 587
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 587,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  4,
                  469,
                  588
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 588,
            "type": {
              "path": [
                "dp_relayer_game",
                "RelayVotingState"
              ],
              "params": [
                {
                  "name": "TechnicalMember",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 65,
                      "typeName": "Vec<TechnicalMember>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nays",
                      "type": 65,
                      "typeName": "Vec<TechnicalMember>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 589,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HeaderInv",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Header - INVALID"
                      ]
                    },
                    {
                      "name": "ConfirmedBlocksC",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Confirmed Blocks - CONFLICT"
                      ]
                    },
                    {
                      "name": "ContinuousInv",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Continuous - INVALID"
                      ]
                    },
                    {
                      "name": "AffirmationExisted",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Affirmation - EXISTED"
                      ]
                    },
                    {
                      "name": "HeaderHashInv",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Header Hash - INVALID"
                      ]
                    },
                    {
                      "name": "MMRInv",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "MMR - INVALID"
                      ]
                    },
                    {
                      "name": "HeaderHashMis",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Header Hash - MISMATCHED"
                      ]
                    },
                    {
                      "name": "ConfirmedHeaderNE",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Confirmed Header - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "ReceiptProofInv",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "EthereumReceipt Proof - INVALID"
                      ]
                    },
                    {
                      "name": "PendingRelayHeaderParcelNE",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Pending Relay Header Parcel - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "PendingRelayHeaderParcelAE",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Pending Relay Header Parcel - ALREADY EXISTED"
                      ]
                    },
                    {
                      "name": "AlreadyVoteForAyeDup",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Already Vote for Aye - DUPLICATED"
                      ]
                    },
                    {
                      "name": "AlreadyVoteForNayDup",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Already Vote for Nay - DUPLICATED"
                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 590,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 17
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 591,
            "type": {
              "path": [
                "to_ethereum_backing",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddrLenMis",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Address Length - MISMATCHED"
                      ]
                    },
                    {
                      "name": "PubkeyPrefixMis",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Pubkey Prefix - MISMATCHED"
                      ]
                    },
                    {
                      "name": "BytesCF",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Bytes - CONVERSION FAILED"
                      ]
                    },
                    {
                      "name": "IntCF",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Int - CONVERSION FAILED"
                      ]
                    },
                    {
                      "name": "ArrayCF",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Array - CONVERSION FAILED"
                      ]
                    },
                    {
                      "name": "AddressCF",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Address - CONVERSION FAILED"
                      ]
                    },
                    {
                      "name": "AssetAR",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Asset - ALREADY REDEEMED"
                      ]
                    },
                    {
                      "name": "AuthoritiesChangeAR",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Authorities Change - ALREADY SYNCED"
                      ]
                    },
                    {
                      "name": "EthLogPF",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Eth Log - PARSING FAILED"
                      ]
                    },
                    {
                      "name": "KtonLockedNSBA",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "*KTON* Locked - NO SUFFICIENT BACKING ASSETS"
                      ]
                    },
                    {
                      "name": "RingLockedNSBA",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "*RING* Locked - NO SUFFICIENT BACKING ASSETS"
                      ]
                    },
                    {
                      "name": "LogEntryNE",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Log Entry - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "RedeemDis",
                      "fields": [

                      ],
                      "index": 12,
                      "docs": [
                        "Redeem - DISABLED"
                      ]
                    },
                    {
                      "name": "RingLockLim",
                      "fields": [

                      ],
                      "index": 13,
                      "docs": [
                        "Ring Lock - LIMITED"
                      ]
                    },
                    {
                      "name": "KtonLockLim",
                      "fields": [

                      ],
                      "index": 14,
                      "docs": [
                        "Kton Lock - LIMITED"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 592,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  8,
                  4
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 593,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 594
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 594,
            "type": {
              "path": [
                "dp_relayer_game",
                "RelayAffirmation"
              ],
              "params": [
                {
                  "name": "RelayHeaderParcel",
                  "type": 469
                },
                {
                  "name": "Relayer",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "RelayHeaderId",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relayer",
                      "type": 0,
                      "typeName": "Relayer",
                      "docs": [

                      ]
                    },
                    {
                      "name": "relay_header_parcels",
                      "type": 479,
                      "typeName": "Vec<RelayHeaderParcel>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "maybe_extended_relay_affirmation_id",
                      "type": 595,
                      "typeName": "Option<RelayAffirmationId<RelayHeaderId>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "verified_on_chain",
                      "type": 30,
                      "typeName": "bool",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 595,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 94
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 94,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 596,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 95
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 597,
            "type": {
              "path": [
                "darwinia_relayer_game",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RelayParcelAR",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Relay Parcel - ALREADY RELAYED"
                      ]
                    },
                    {
                      "name": "RoundMis",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Round - MISMATCHED"
                      ]
                    },
                    {
                      "name": "ActiveGamesTM",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Active Games - TOO MANY"
                      ]
                    },
                    {
                      "name": "ExistedAffirmationsFoundC",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Existed Affirmation(s) Found - CONFLICT"
                      ]
                    },
                    {
                      "name": "GameAtThisRoundC",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Game at This Round - CLOSED"
                      ]
                    },
                    {
                      "name": "RelayAffirmationDup",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Relay Affirmation - DUPLICATED"
                      ]
                    },
                    {
                      "name": "StakeIns",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Usable *RING* for Stake - INSUFFICIENT"
                      ]
                    },
                    {
                      "name": "RelayProofsQuantityInv",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Relay Proofs Quantity - INVALID"
                      ]
                    },
                    {
                      "name": "RelayAffirmationNE",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "Relay Affirmation - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "ExtendedRelayAffirmationNE",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "Extended Relay Affirmation - NOT EXISTED"
                      ]
                    },
                    {
                      "name": "PreviousRelayProofsInc",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "Previous Relay Proofs - INCOMPLETE"
                      ]
                    },
                    {
                      "name": "PendingRelayParcelNE",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "Pending Relay Parcel - NOT EXISTED"
                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 598,
            "type": {
              "path": [
                "bp_header_chain",
                "AuthoritySet"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "authorities",
                      "type": 37,
                      "typeName": "AuthorityList",
                      "docs": [

                      ]
                    },
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 599,
            "type": {
              "path": [
                "pallet_bridge_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidJustification",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "The given justification is invalid for the given header."
                      ]
                    },
                    {
                      "name": "InvalidAuthoritySet",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The authority set from the underlying header chain is invalid."
                      ]
                    },
                    {
                      "name": "TooManyRequests",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "There are too many requests for the current window to handle."
                      ]
                    },
                    {
                      "name": "OldHeader",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "The header being imported is older than the best finalized header known to the pallet."
                      ]
                    },
                    {
                      "name": "UnknownHeader",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The header is unknown to the pallet."
                      ]
                    },
                    {
                      "name": "UnsupportedScheduledChange",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The scheduled authority set change found in the header is unsupported by the pallet.",
                        "",
                        "This is the case for non-standard (e.g forced) authority set changes."
                      ]
                    },
                    {
                      "name": "NotInitialized",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The pallet is not yet initialized."
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The pallet has already been initialized."
                      ]
                    },
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "All pallet operations are halted."
                      ]
                    },
                    {
                      "name": "StorageRootMismatch",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The storage proof doesn't contains storage root. So it is invalid for given header."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 600,
            "type": {
              "path": [
                "bp_messages",
                "InboundLaneData"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relayers",
                      "type": 601,
                      "typeName": "VecDeque<UnrewardedRelayer<RelayerId>>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "last_confirmed_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 601,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 602
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 602,
            "type": {
              "path": [
                "bp_messages",
                "UnrewardedRelayer"
              ],
              "params": [
                {
                  "name": "RelayerId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relayer",
                      "type": 0,
                      "typeName": "RelayerId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "messages",
                      "type": 120,
                      "typeName": "DeliveredMessages",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 603,
            "type": {
              "path": [
                "bp_messages",
                "OutboundLaneData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "oldest_unpruned_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_received_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "latest_generated_nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 604,
            "type": {
              "path": [
                "bp_messages",
                "MessageKey"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane_id",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 605,
            "type": {
              "path": [
                "bp_messages",
                "MessageData"
              ],
              "params": [
                {
                  "name": "Fee",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "payload",
                      "type": 10,
                      "typeName": "MessagePayload",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Fee",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 606,
            "type": {
              "path": [
                "pallet_bridge_messages",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Halted",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "All pallet operations are halted."
                      ]
                    },
                    {
                      "name": "MessageRejectedByChainVerifier",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Message has been treated as invalid by chain verifier."
                      ]
                    },
                    {
                      "name": "MessageRejectedByLaneVerifier",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Message has been treated as invalid by lane verifier."
                      ]
                    },
                    {
                      "name": "FailedToWithdrawMessageFee",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Submitter has failed to pay fee for delivering and dispatching messages."
                      ]
                    },
                    {
                      "name": "TooManyMessagesInTheProof",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "The transaction brings too many messages."
                      ]
                    },
                    {
                      "name": "InvalidMessagesProof",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Invalid messages has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidMessagesDeliveryProof",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Invalid messages delivery proof has been submitted."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayers",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "The bridged chain has invalid `UnrewardedRelayers` in its storage (fatal for the lane)."
                      ]
                    },
                    {
                      "name": "InvalidUnrewardedRelayersState",
                      "fields": [

                      ],
                      "index": 8,
                      "docs": [
                        "The relayer has declared invalid unrewarded relayers state in the",
                        "`receive_messages_delivery_proof` call."
                      ]
                    },
                    {
                      "name": "MessageIsAlreadyDelivered",
                      "fields": [

                      ],
                      "index": 9,
                      "docs": [
                        "The message someone is trying to work with (i.e. increase fee) is already-delivered."
                      ]
                    },
                    {
                      "name": "MessageIsNotYetSent",
                      "fields": [

                      ],
                      "index": 10,
                      "docs": [
                        "The message someone is trying to work with (i.e. increase fee) is not yet sent."
                      ]
                    },
                    {
                      "name": "TryingToConfirmMoreMessagesThanExpected",
                      "fields": [

                      ],
                      "index": 11,
                      "docs": [
                        "The number of actually confirmed messages is going to be larger than the number of",
                        "messages in the proof. This may mean that this or bridged chain storage is corrupted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 607,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Relayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 608,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 607
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 609,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "Order"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "lane",
                      "type": 14,
                      "typeName": "LaneId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "message",
                      "type": 8,
                      "typeName": "MessageNonce",
                      "docs": [

                      ]
                    },
                    {
                      "name": "sent_time",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": [

                      ]
                    },
                    {
                      "name": "confirm_time",
                      "type": 59,
                      "typeName": "Option<BlockNumber>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "locked_collateral",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "assigned_relayers",
                      "type": 610,
                      "typeName": "Vec<AssignedRelayer<AccountId, BlockNumber, Balance>>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 610,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 611
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 611,
            "type": {
              "path": [
                "pallet_fee_market",
                "types",
                "AssignedRelayer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": [

                      ]
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": [

                      ]
                    },
                    {
                      "name": "valid_range",
                      "type": 612,
                      "typeName": "Range<BlockNumber>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 612,
            "type": {
              "path": [
                "Range"
              ],
              "params": [
                {
                  "name": "Idx",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "Idx",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 613,
            "type": {
              "path": [
                "pallet_fee_market",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Insufficient balance."
                      ]
                    },
                    {
                      "name": "AlreadyEnrolled",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "The relayer has been enrolled."
                      ]
                    },
                    {
                      "name": "NotEnrolled",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "This relayer doesn't enroll ever."
                      ]
                    },
                    {
                      "name": "CollateralTooLow",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Locked collateral is too low to cover one order."
                      ]
                    },
                    {
                      "name": "StillHasOrdersNotConfirmed",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Update locked collateral is not allow since some orders are not confirm."
                      ]
                    },
                    {
                      "name": "RelayFeeTooLow",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The fee is lower than MinimumRelayFee."
                      ]
                    },
                    {
                      "name": "OccupiedRelayer",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "The relayer is occupied, and can't cancel enrollment now."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 614,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  6,
                  6
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 615,
            "type": {
              "path": [
                "to_substrate_backing",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientBalance",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Insufficient balance."
                      ]
                    },
                    {
                      "name": "RingLockLimited",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Ring Lock LIMITED."
                      ]
                    },
                    {
                      "name": "RingDailyLimited",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Redeem Daily Limited"
                      ]
                    },
                    {
                      "name": "NonceDuplicated",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Message nonce duplicated."
                      ]
                    },
                    {
                      "name": "UnsupportedToken",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Unsupported token"
                      ]
                    },
                    {
                      "name": "InvalidRecipient",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Invalid recipient"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 616,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  58,
                  9
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 617,
            "type": {
              "path": [
                "darwinia_evm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Not enough balance to perform action"
                      ]
                    },
                    {
                      "name": "FeeOverflow",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Calculating total fee overflowed"
                      ]
                    },
                    {
                      "name": "PaymentOverflow",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "Calculating total payment overflowed"
                      ]
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [
                        "Withdraw fee failed"
                      ]
                    },
                    {
                      "name": "GasPriceTooLow",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [
                        "Gas price is too low."
                      ]
                    },
                    {
                      "name": "InvalidNonce",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "Nonce is invalid"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 618,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 619
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 619,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  510,
                  620,
                  623
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 620,
            "type": {
              "path": [
                "fp_rpc",
                "TransactionStatus"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transaction_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transaction_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": [

                      ]
                    },
                    {
                      "name": "from",
                      "type": 58,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "to",
                      "type": 621,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "contract_address",
                      "type": 621,
                      "typeName": "Option<H160>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 622,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 100,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 621,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 58
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 58,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 622,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 132
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 623,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "ReceiptV3"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": null,
                          "type": 624,
                          "typeName": "EIP658ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP2930",
                      "fields": [
                        {
                          "name": null,
                          "type": 624,
                          "typeName": "EIP2930ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "EIP1559",
                      "fields": [
                        {
                          "name": null,
                          "type": 624,
                          "typeName": "EIP1559ReceiptData",
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 624,
            "type": {
              "path": [
                "ethereum",
                "receipt",
                "EIP658ReceiptData"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status_code",
                      "type": 2,
                      "typeName": "u8",
                      "docs": [

                      ]
                    },
                    {
                      "name": "used_gas",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 100,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs",
                      "type": 622,
                      "typeName": "Vec<Log>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 625,
            "type": {
              "path": [
                "ethereum",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 510
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 626,
                      "typeName": "Header",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions",
                      "type": 628,
                      "typeName": "Vec<T>",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers",
                      "type": 629,
                      "typeName": "Vec<Header>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 626,
            "type": {
              "path": [
                "ethereum",
                "header",
                "Header"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "ommers_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "beneficiary",
                      "type": 58,
                      "typeName": "H160",
                      "docs": [

                      ]
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "transactions_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "receipts_root",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "logs_bloom",
                      "type": 100,
                      "typeName": "Bloom",
                      "docs": [

                      ]
                    },
                    {
                      "name": "difficulty",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "number",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_limit",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "gas_used",
                      "type": 98,
                      "typeName": "U256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64",
                      "docs": [

                      ]
                    },
                    {
                      "name": "extra_data",
                      "type": 10,
                      "typeName": "Bytes",
                      "docs": [

                      ]
                    },
                    {
                      "name": "mix_hash",
                      "type": 9,
                      "typeName": "H256",
                      "docs": [

                      ]
                    },
                    {
                      "name": "nonce",
                      "type": 627,
                      "typeName": "H64",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 627,
            "type": {
              "path": [
                "ethereum_types",
                "hash",
                "H64"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 162,
                      "typeName": "[u8; /*«*/ 8 /*»*/]",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 628,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 510
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 629,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 626
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 630,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 623
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 631,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "sequence": {
                  "type": 620
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 632,
            "type": {
              "path": [
                "darwinia_ethereum",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSignature",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [
                        "Signature is invalid."
                      ]
                    },
                    {
                      "name": "PreLogExists",
                      "fields": [

                      ],
                      "index": 1,
                      "docs": [
                        "Pre-log is present, therefore transact is not allowed."
                      ]
                    },
                    {
                      "name": "InternalTransactionExitError",
                      "fields": [

                      ],
                      "index": 2,
                      "docs": [
                        "The internal transaction failed."
                      ]
                    },
                    {
                      "name": "InternalTransactionRevertError",
                      "fields": [

                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "InternalTransactionFatalError",
                      "fields": [

                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "ReadyOnlyCall",
                      "fields": [

                      ],
                      "index": 5,
                      "docs": [
                        "The internal call failed."
                      ]
                    },
                    {
                      "name": "MessageTransactionError",
                      "fields": [

                      ],
                      "index": 6,
                      "docs": [
                        "Message transaction invalid"
                      ]
                    },
                    {
                      "name": "MessageValidateError",
                      "fields": [

                      ],
                      "index": 7,
                      "docs": [
                        "Message validate invalid"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Ethereum pallet errors."
              ]
            }
          },
          {
            "id": 633,
            "type": {
              "path": [
                "fp_self_contained",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 193
                },
                {
                  "name": "Call",
                  "type": 397
                },
                {
                  "name": "Signature",
                  "type": 498
                },
                {
                  "name": "Extra",
                  "type": 634
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 645,
                      "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 634,
            "type": {
              "path": [

              ],
              "params": [

              ],
              "def": {
                "tuple": [
                  635,
                  636,
                  637,
                  638,
                  640,
                  641,
                  642,
                  643
                ]
              },
              "docs": [

              ]
            }
          },
          {
            "id": 635,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 636,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 637,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 638,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 639,
                      "typeName": "Era",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 639,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [

              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [

                      ],
                      "index": 0,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 5,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 6,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 16,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 17,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 18,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 19,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 20,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 21,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 22,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 23,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 24,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 25,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 26,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 27,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 28,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 29,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 30,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 31,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 32,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 33,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 34,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 35,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 36,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 37,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 38,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 39,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 40,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 41,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 42,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 43,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 44,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 45,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 46,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 47,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 48,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 49,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 50,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 51,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 52,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 53,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 54,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 55,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 56,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 57,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 58,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 59,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 60,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 61,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 62,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 63,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 64,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 65,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 66,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 67,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 68,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 69,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 70,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 71,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 72,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 73,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 74,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 75,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 76,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 77,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 78,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 79,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 80,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 81,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 82,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 83,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 84,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 85,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 86,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 87,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 88,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 89,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 90,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 91,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 92,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 93,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 94,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 95,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 96,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 97,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 98,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 99,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 100,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 101,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 102,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 103,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 104,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 105,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 106,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 107,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 108,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 109,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 110,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 111,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 112,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 113,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 114,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 115,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 116,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 117,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 118,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 119,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 120,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 121,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 122,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 123,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 124,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 125,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 126,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 127,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 128,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 129,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 130,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 131,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 132,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 133,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 134,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 135,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 136,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 137,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 138,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 139,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 140,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 141,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 142,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 143,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 144,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 145,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 146,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 147,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 148,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 149,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 150,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 151,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 152,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 153,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 154,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 155,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 156,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 157,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 158,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 159,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 160,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 161,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 162,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 163,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 164,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 165,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 166,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 167,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 168,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 169,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 170,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 171,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 172,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 173,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 174,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 175,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 176,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 177,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 178,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 179,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 180,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 181,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 182,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 183,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 184,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 185,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 186,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 187,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 188,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 189,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 190,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 191,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 192,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 193,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 194,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 195,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 196,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 197,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 198,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 199,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 200,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 201,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 202,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 203,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 204,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 205,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 206,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 207,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 208,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 209,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 210,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 211,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 212,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 213,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 214,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 215,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 216,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 217,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 218,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 219,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 220,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 221,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 222,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 223,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 224,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 225,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 226,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 227,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 228,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 229,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 230,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 231,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 232,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 233,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 234,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 235,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 236,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 237,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 238,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 239,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 240,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 241,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 242,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 243,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 244,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 245,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 246,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 247,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 248,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 249,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 250,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 251,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 252,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 253,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 254,
                      "docs": [

                      ]
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": [

                          ]
                        }
                      ],
                      "index": 255,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 640,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 146,
                      "typeName": "T::Index",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 641,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 642,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 47,
                      "typeName": "BalanceOf<T>",
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 643,
            "type": {
              "path": [
                "darwinia_bridge_ethereum",
                "CheckEthereumRelayHeaderParcel"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 644
                }
              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 644,
            "type": {
              "path": [
                "darwinia_runtime",
                "Runtime"
              ],
              "params": [

              ],
              "def": {
                "composite": {
                  "fields": [

                  ]
                }
              },
              "docs": [

              ]
            }
          },
          {
            "id": 645,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 193
                },
                {
                  "name": "Call",
                  "type": 397
                },
                {
                  "name": "Signature",
                  "type": 498
                },
                {
                  "name": "Extra",
                  "type": 634
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": null,
                      "docs": [

                      ]
                    }
                  ]
                }
              },
              "docs": [

              ]
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 9,
                    "value": 144
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 145
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 143
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 147
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 151,
              "value": "0x00f2052a0100000000204aa9d1010000405973070000000001c0ca489351010000010098f73e5d010000010000000000000000405973070000000001c0529bfdc50100000100204aa9d1010000010088526a740000004059730700000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 155,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 157,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 158,
              "value": "0x2044617277696e69612044617277696e696100000000da0400000000000038df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000bc9d89904f5b923f01000000d2bc9897eed08f1503000000f78b278be53f454c02000000cbca25e39f14238702000000ed99c5acb25eedf503000000687ad44ad37f03c201000000ab3c0572291feb8b0100000037c8bb1350a9a2a801000000582211f65bb14b8904000000e65b00e46cedd0aa02000000bd78255d4feeea1f0400000000000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 90,
              "value": "0x1200",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 163
          },
          "index": 0
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 164
                },
                "fallback": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "plain": 168
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 168
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "plain": 169
                },
                "fallback": "0x00",
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 164
                },
                "fallback": "0x00",
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 172
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "plain": 174
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 174
                },
                "fallback": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_initialize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "plain": 86
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              }
            ]
          },
          "calls": {
            "type": 176
          },
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": 8,
              "value": "0x6009000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": 8,
              "value": "0x7017000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "errors": {
            "type": 181
          },
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 182
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 191
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 192
          },
          "events": {
            "type": 25
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 195
          },
          "index": 4
        },
        {
          "name": "Kton",
          "storage": {
            "prefix": "Kton",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 191
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 196
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 197
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 119
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": [

                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 198
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "type": 199,
              "value": "0x04000000000000000000000000000000000008af2f0001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": 201
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "type": 204
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": 206
          },
          "index": 7
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "plain": 207
                },
                "fallback": "0x00",
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "plain": 209
                },
                "fallback": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "plain": 214
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "plain": 217
                },
                "fallback": "0x00",
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "plain": 218
                },
                "fallback": "0x00",
                "docs": [
                  " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
                  " `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 222
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "plain": 213
                },
                "fallback": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "type": 275
          },
          "events": {
            "type": 28
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": 4,
              "value": "0x58020000",
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "SolutionImprovementThreshold",
              "type": 148,
              "value": "0x20a10700",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" (in any phase)."
              ]
            },
            {
              "name": "OffchainRepeat",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "type": 8,
              "value": "0x65666666666666e6",
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "MinerMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight that the miner should consume.",
                "",
                " The miner will ensure that the total weight of the unsigned solution will not exceed",
                " this value, based on [`WeightInfo::submit_unsigned`]."
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " This should probably be similar to [`Config::MinerMaxWeight`]."
              ]
            },
            {
              "name": "SignedRewardBase",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "type": 6,
              "value": "0x40420f00000000000000000000000000",
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "type": 6,
              "value": "0xe8030000000000000000000000000000",
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "VoterSnapshotPerBlock",
              "type": 4,
              "value": "0xe4570000",
              "docs": [
                " The maximum number of voters to put in the snapshot. At the moment, snapshots are only",
                " over a single block, but once multi-block elections are introduced they will take place",
                " over multiple blocks.",
                "",
                " Also, note the data type: If the voters are represented by a `u32` in `type",
                " CompactSolution`, the same `u32` is used here to ensure bounds are respected."
              ]
            },
            {
              "name": "MinerMaxLength",
              "type": 4,
              "value": "0x00003600",
              "docs": [
                " Maximum length (bytes) that the mined solution should consume.",
                "",
                " The miner will ensure that the total length of the unsigned solution will not exceed",
                " this value."
              ]
            }
          ],
          "errors": {
            "type": 277
          },
          "index": 38
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x50010000",
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 278
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 286
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 287
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " When updating this storage item, you must also update the `CounterForValidators`."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Validators` map."
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 289
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                  "",
                  " When updating this storage item, you must also update the `CounterForNominators`."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Nominators` map."
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "plain": 290
                },
                "fallback": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 46
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 46
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 287
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 292
                  }
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "plain": 296
                },
                "fallback": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "plain": 148
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 297
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "plain": 144
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 302
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 299
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 303
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 295,
                    "value": 304
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "type": {
                  "plain": 305
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 307
                },
                "fallback": "0x06",
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v7.0.0 for new networks."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "plain": 308
                },
                "fallback": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              },
              {
                "name": "LivingTime",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The chain's running time form genesis in milliseconds,",
                  " use for calculate darwinia era payout"
                ]
              },
              {
                "name": "PayoutFraction",
                "modifier": "Default",
                "type": {
                  "plain": 148
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the total payout that is distributed to validators and nominators",
                  "",
                  " The reset might go to Treasury or something else."
                ]
              },
              {
                "name": "RingPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *RING* in pool."
                ]
              },
              {
                "name": "KtonPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *KTON* in pool."
                ]
              }
            ]
          },
          "calls": {
            "type": 309
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": 4,
              "value": "0x06000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": 4,
              "value": "0x0d000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": 4,
              "value": "0x40000000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "BondingDurationInEra",
              "type": 4,
              "value": "0x0e000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "BondingDurationInBlockNumber",
              "type": 4,
              "value": "0x80130300",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "Cap",
              "type": 6,
              "value": "0x0000e8890423c78a0000000000000000",
              "docs": [
                " Darwinia's hard cap default `10_000_000_000 * 10^9`"
              ]
            },
            {
              "name": "TotalPower",
              "type": 4,
              "value": "0x00ca9a3b",
              "docs": [
                " Darwinia's staking vote default `1_000_000_000`"
              ]
            },
            {
              "name": "MaxNominations",
              "type": 4,
              "value": "0x10000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 313
          },
          "index": 8
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 314
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 315,
                    "value": 104
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 34,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 33
          },
          "constants": [

          ],
          "errors": null,
          "index": 9
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 10
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 316
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 285
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 318
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 320,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": 322
          },
          "events": {
            "type": 35
          },
          "constants": [

          ],
          "errors": {
            "type": 323
          },
          "index": 11
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": 324
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": 325
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": 86
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "type": 327
          },
          "events": {
            "type": 36
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "errors": {
            "type": 339
          },
          "index": 13
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "plain": 340
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 342
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "type": 347
          },
          "events": {
            "type": 41
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": 355
          },
          "index": 14
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 15
        },
        {
          "name": "DarwiniaHeaderMmr",
          "storage": {
            "prefix": "DarwiniaHeaderMmr",
            "items": [
              {
                "name": "MmrSize",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Size of the MMR"
                ]
              },
              {
                "name": "Peaks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Peaks of the MMR"
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 35
        },
        {
          "name": "MessageGadget",
          "storage": {
            "prefix": "MessageGadget",
            "items": [
              {
                "name": "CommitmentContract",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 356
          },
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 50
        },
        {
          "name": "EcdsaRelayAuthority",
          "storage": {
            "prefix": "EcdsaRelayAuthority",
            "items": [
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 357
                },
                "fallback": "0x00",
                "docs": [
                  " Anyone can request to be an authority with some stake.",
                  "",
                  " Once you requested, you'll enter the candidates.",
                  " This request can be canceled at any time."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 357
                },
                "fallback": "0x00",
                "docs": [
                  " Authority must elect from candidates",
                  "",
                  " Once you become an authority, you must serve for a specific term.",
                  " Before that, you can't renounce."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Optional",
                "type": {
                  "plain": 360
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities for the next term."
                ]
              },
              {
                "name": "NextTerm",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Term index counter, play the same role as nonce in extrinsic."
                ]
              },
              {
                "name": "AuthoritiesToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 361
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change requirements.",
                  "",
                  " Once the signatures count reaches the sign threshold storage will be killed then raise a",
                  " signed event Params.",
                  " \t1. the message to sign",
                  " \t1. collected signatures"
                ]
              },
              {
                "name": "MmrRootsToSignKeys",
                "modifier": "Default",
                "type": {
                  "plain": 363
                },
                "fallback": "0x00",
                "docs": [
                  " The `MmrRootsToSign` keys cache.",
                  "",
                  " Only use for update the `MmrRootsToSign` once the authorities changed."
                ]
              },
              {
                "name": "MmrRootsToSign",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 364
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the relay requirements from the backing module here.",
                  "",
                  " If the map's key has existed, it means the mmr root relay requirement is valid.",
                  "",
                  " Once the signatures count reaches the sign threshold storage will be killed then raise a",
                  " signed event Params.",
                  " \t1. the mmr root to be signed, collected signatures"
                ]
              },
              {
                "name": "SubmitDuration",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x2c010000",
                "docs": [
                  " The mmr root signature submit duration, will be delayed if on authorities change."
                ]
              }
            ]
          },
          "calls": {
            "type": 365
          },
          "events": {
            "type": 50
          },
          "constants": [
            {
              "name": "MaxMembers",
              "type": 4,
              "value": "0x07000000",
              "docs": [

              ]
            },
            {
              "name": "LockId",
              "type": 162,
              "value": "0x6574687261757468",
              "docs": [

              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0xc0890100",
              "docs": [

              ]
            },
            {
              "name": "OpCodes",
              "type": 366,
              "value": "0x479fbdf9b4bcf497",
              "docs": [

              ]
            },
            {
              "name": "SignThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [

              ]
            },
            {
              "name": "SubmitDuration",
              "type": 4,
              "value": "0x2c010000",
              "docs": [

              ]
            },
            {
              "name": "MaxSchedules",
              "type": 4,
              "value": "0x0a000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 367
          },
          "index": 36
        },
        {
          "name": "EcdsaAuthority",
          "storage": {
            "prefix": "EcdsaAuthority",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": [
                  " The current active authorities."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The nonce of the current active authorities. AKA term/session/era."
                ]
              },
              {
                "name": "AuthoritiesChangeToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 370
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change waiting for signing."
                ]
              },
              {
                "name": "NewMessageRootToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 372
                },
                "fallback": "0x00",
                "docs": [
                  " The new message root waiting for signing."
                ]
              },
              {
                "name": "PreviousMessageRoot",
                "modifier": "Optional",
                "type": {
                  "plain": 373
                },
                "fallback": "0x00",
                "docs": [
                  " Record the previous message root.",
                  "",
                  " Use for checking if the message root getter get the same message root as the previous one.",
                  " And if this is empty, it means the message root is require to be relayed."
                ]
              }
            ]
          },
          "calls": {
            "type": 374
          },
          "events": {
            "type": 56
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " The maximum number of authorities."
              ]
            },
            {
              "name": "ChainId",
              "type": 10,
              "value": "0x083436",
              "docs": [
                " Chain's ID, which is using for constructing the message. (follow EIP-712 SPEC)"
              ]
            },
            {
              "name": "SignThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [
                " The signing threshold.",
                "",
                " Once `signatures_count / authorities_count >= threshold`, we say the message is trusted."
              ]
            },
            {
              "name": "SyncInterval",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The interval of checking the message root."
              ]
            },
            {
              "name": "MaxPendingPeriod",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " How long should we wait for the message root to be signed.",
                "",
                " If the collecting new message root signatures process takes more than",
                " `MaxPendingPeriod`, we will drop the root. And update the root with a new one."
              ]
            }
          ],
          "errors": {
            "type": 375
          },
          "index": 51
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 376
                },
                "fallback": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 378
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 379
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 380
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 383
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Accounts for which there are locks in action which may be removed at some point in the",
                  " future. The value is the block number at which the lock expires and may be removed.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 391
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 392
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 393
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 394
          },
          "events": {
            "type": 64
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x005039278c0400000000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 30,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x08070000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "errors": {
            "type": 395
          },
          "index": 37
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 396
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 520
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 398
          },
          "events": {
            "type": 69
          },
          "constants": [

          ],
          "errors": {
            "type": 521
          },
          "index": 16
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 396
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 520
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 399
          },
          "events": {
            "type": 70
          },
          "constants": [

          ],
          "errors": {
            "type": 522
          },
          "index": 17
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 523
                },
                "fallback": "0x00",
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "plain": 523
                },
                "fallback": "0x00",
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 72
                },
                "fallback": "0x00",
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 525
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 400
          },
          "events": {
            "type": 71
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 162,
              "value": "0x706872656c656374",
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": "0x00e1f505000000000000000000000000",
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": "0x0090d848170000000000000000000000",
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": "0x00d43000000000000000000000000000",
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            }
          ],
          "errors": {
            "type": 526
          },
          "index": 18
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 402
          },
          "events": {
            "type": 74
          },
          "constants": [

          ],
          "errors": {
            "type": 527
          },
          "index": 19
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 529
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 403
          },
          "events": {
            "type": 75
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 142,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x005039278c0400000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x00460500",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 142,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "errors": {
            "type": 531
          },
          "index": 20
        },
        {
          "name": "KtonTreasury",
          "storage": {
            "prefix": "KtonTreasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 529
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 404
          },
          "events": {
            "type": 76
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 142,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x00460500",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 142,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "errors": {
            "type": 532
          },
          "index": 39
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "items": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 533
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 405
          },
          "events": {
            "type": 77
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "type": 4,
              "value": "0x40380000",
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "type": 308,
              "value": "0x14",
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "errors": {
            "type": 534
          },
          "index": 40
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "items": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 535
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "plain": 285
                },
                "fallback": "0x00",
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": {
            "type": 406
          },
          "events": {
            "type": 78
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": "0x0038b06fa30400000000000000000000",
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": "0x00c20100",
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": "0x80c61300",
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "BountyCuratorDeposit",
              "type": 142,
              "value": "0x20a10700",
              "docs": [
                " Percentage of the curator fee that will be reserved upfront as deposit for bounty",
                " curator."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": "0x0040e59c301200000000000000000000",
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length."
              ]
            }
          ],
          "errors": {
            "type": 537
          },
          "index": 41
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 407
          },
          "events": {
            "type": 79
          },
          "constants": [

          ],
          "errors": {
            "type": 538
          },
          "index": 27
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 539
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 541
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "type": 408
          },
          "events": {
            "type": 80
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x00ca9a3b000000000000000000000000",
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "type": 4,
              "value": "0x1c000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 542
          },
          "index": 21
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 410
          },
          "events": {
            "type": 81
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 543
          },
          "index": 22
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 544
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 454
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 548
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 550
                },
                "fallback": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "type": 418
          },
          "events": {
            "type": 82
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x4095004a170000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x40b56400000000000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x20c7c748170000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": {
            "type": 554
          },
          "index": 23
        },
        {
          "name": "Society",
          "storage": {
            "prefix": "Society",
            "items": [
              {
                "name": "Founder",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The first member."
                ]
              },
              {
                "name": "Rules",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " A hash of the rules of this society concerning membership. Can only be set once and",
                  " only by the founder."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 555
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of candidates; bidders that are attempting to become members."
                ]
              },
              {
                "name": "SuspendedCandidates",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 558
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended candidates."
                ]
              },
              {
                "name": "Pot",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Amount of our account balance that is specifically for the next round's bid(s)."
                ]
              },
              {
                "name": "Head",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The most primary from the most recently approved members."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of members, ordered."
                ]
              },
              {
                "name": "SuspendedMembers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended members."
                ]
              },
              {
                "name": "Bids",
                "modifier": "Default",
                "type": {
                  "plain": 555
                },
                "fallback": "0x00",
                "docs": [
                  " The current bids, stored ordered by the value of the bid."
                ]
              },
              {
                "name": "Vouching",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 559
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Members currently vouching or banned from vouching again"
                ]
              },
              {
                "name": "Payouts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 560
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Pending payouts; ordered by block number, with the amount that should be paid out."
                ]
              },
              {
                "name": "Strikes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ongoing number of losing votes cast by the member."
                ]
              },
              {
                "name": "Votes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 562,
                    "value": 563
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Double map from Candidate -> Voter -> (Maybe) Vote."
                ]
              },
              {
                "name": "Defender",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The defending member currently being challenged."
                ]
              },
              {
                "name": "DefenderVotes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 563
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes for the defender."
                ]
              },
              {
                "name": "MaxMembers",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The max number of members for the society at one time."
                ]
              }
            ]
          },
          "calls": {
            "type": 458
          },
          "events": {
            "type": 83
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f736f636965",
              "docs": [
                " The societies's pallet id"
              ]
            },
            {
              "name": "CandidateDeposit",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " The minimum amount of a deposit required for a bid to be made."
              ]
            },
            {
              "name": "WrongSideDeduction",
              "type": 6,
              "value": "0x00943577000000000000000000000000",
              "docs": [
                " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
                " doesn't vote or someone votes in the wrong way."
              ]
            },
            {
              "name": "MaxStrikes",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The number of times a member may vote the wrong way (or not at all, when they are a",
                " skeptic) before they become suspended."
              ]
            },
            {
              "name": "PeriodSpend",
              "type": 6,
              "value": "0x0088526a740000000000000000000000",
              "docs": [
                " The amount of incentive paid within each period. Doesn't include VoterTip."
              ]
            },
            {
              "name": "RotationPeriod",
              "type": 4,
              "value": "0x80bb0000",
              "docs": [
                " The number of blocks between candidate/membership rotation periods."
              ]
            },
            {
              "name": "MaxLockDuration",
              "type": 4,
              "value": "0x004eed00",
              "docs": [
                " The maximum duration of the payout lock."
              ]
            },
            {
              "name": "ChallengePeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " The number of blocks between membership challenges."
              ]
            },
            {
              "name": "MaxCandidateIntake",
              "type": 4,
              "value": "0x01000000",
              "docs": [
                " The maximum number of candidates that we accept per round."
              ]
            }
          ],
          "errors": {
            "type": 564
          },
          "index": 24
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 565
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 562,
                    "value": 566
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "type": 460
          },
          "events": {
            "type": 84
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "type": 6,
              "value": "0x80f0fa02000000000000000000000000",
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "type": 90,
              "value": "0x0900",
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "errors": {
            "type": 567
          },
          "index": 25
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 568
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 86
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 571
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 461
          },
          "events": {
            "type": 85
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x00806e8774010000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 572
          },
          "index": 26
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 573
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 577
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 463
          },
          "events": {
            "type": 88
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x20303101000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0xe40c0000000000000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x20303101000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0xc8190000000000000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 581
          },
          "index": 28
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat"
                    ],
                    "key": 582,
                    "value": 583
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of open multisig operations."
                ]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 584
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 465
          },
          "events": {
            "type": 91
          },
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": "0x002ffd48170000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": "0x00d43000000000000000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "type": 90,
              "value": "0x6400",
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "errors": {
            "type": 585
          },
          "index": 29
        },
        {
          "name": "EthereumRelay",
          "storage": {
            "prefix": "DarwiniaEthereumRelay",
            "items": [
              {
                "name": "ConfirmedHeaderParcels",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 469
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Confirmed ethereum header parcel"
                ]
              },
              {
                "name": "ConfirmedBlockNumbers",
                "modifier": "Default",
                "type": {
                  "plain": 95
                },
                "fallback": "0x00",
                "docs": [
                  " Confirmed Ethereum block numbers",
                  "",
                  " The order are from small to large"
                ]
              },
              {
                "name": "BestConfirmedBlockNumber",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The highest ethereum block number that record in darwinia"
                ]
              },
              {
                "name": "ConfirmedDepth",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x0a000000",
                "docs": [

                ]
              },
              {
                "name": "DagsMerkleRoots",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 477
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Dags merkle roots of ethereum epoch (each epoch is 30000)"
                ]
              },
              {
                "name": "ReceiptVerifyFee",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "PendingRelayHeaderParcels",
                "modifier": "Default",
                "type": {
                  "plain": 586
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 468
          },
          "events": {
            "type": 93
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f657468726c",
              "docs": [

              ]
            },
            {
              "name": "ConfirmPeriod",
              "type": 4,
              "value": "0xc0a80000",
              "docs": [

              ]
            },
            {
              "name": "ApproveThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [

              ]
            },
            {
              "name": "RejectThreshold",
              "type": 148,
              "value": "0x80969800",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 589
          },
          "index": 32
        },
        {
          "name": "EthereumBacking",
          "storage": {
            "prefix": "EthereumBacking",
            "items": [
              {
                "name": "VerifiedProof",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 111,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "TokenRedeemAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "DepositRedeemAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "SetAuthoritiesAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "RingTokenAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "KtonTokenAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "RedeemStatus",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x01",
                "docs": [

                ]
              },
              {
                "name": "LockAssetEvents",
                "modifier": "Default",
                "type": {
                  "plain": 590
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 483
          },
          "events": {
            "type": 110
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f657468626b",
              "docs": [

              ]
            },
            {
              "name": "FeePalletId",
              "type": 530,
              "value": "0x64612f6574686665",
              "docs": [

              ]
            },
            {
              "name": "RingLockLimit",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "KtonLockLimit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "AdvancedFee",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "SyncReward",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 591
          },
          "index": 31
        },
        {
          "name": "EthereumRelayerGame",
          "storage": {
            "prefix": "Instance1DarwiniaRelayerGame",
            "items": [
              {
                "name": "RelayHeaderParcelToResolve",
                "modifier": "Default",
                "type": {
                  "plain": 95
                },
                "fallback": "0x00",
                "docs": [
                  " Active games' relay header parcel's ids"
                ]
              },
              {
                "name": "Affirmations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 592,
                    "value": 593
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the active games' affirmations here",
                  "",
                  " The first key is game id, the second key is round index",
                  " then you will get the affirmations under that round in that game"
                ]
              },
              {
                "name": "BestConfirmedHeaderId",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 8
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The best confirmed header id record of a game when it start"
                ]
              },
              {
                "name": "RoundCounts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total rounds of a game",
                  "",
                  " `total rounds - 1 = last round index`"
                ]
              },
              {
                "name": "AffirmTime",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 86
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the closed games here",
                  "",
                  " Game close at this moment, closed games won't accept any affirmation"
                ]
              },
              {
                "name": "GamesToUpdate",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 95
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the closed rounds here",
                  "",
                  " Record the closed rounds endpoint which use for settling or updating",
                  " Settle or update a game will be scheduled which will start at this moment"
                ]
              },
              {
                "name": "Stakes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " All the stakes here"
                ]
              },
              {
                "name": "GameSamplePoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 596
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "LOCK_ID",
              "type": 162,
              "value": "0x64612f7267616d65",
              "docs": [

              ]
            },
            {
              "name": "MAX_ACTIVE_GAMES",
              "type": 2,
              "value": "0x20",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 597
          },
          "index": 33
        },
        {
          "name": "TronBacking",
          "storage": {
            "prefix": "TronBacking",
            "items": [

            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f74726f626b",
              "docs": [

              ]
            }
          ],
          "errors": null,
          "index": 34
        },
        {
          "name": "BridgeCrabDispatch",
          "storage": null,
          "calls": null,
          "events": {
            "type": 112
          },
          "constants": [

          ],
          "errors": null,
          "index": 42
        },
        {
          "name": "BridgeCrabGrandpa",
          "storage": {
            "prefix": "BridgeCrabGrandpa",
            "items": [
              {
                "name": "RequestCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current number of requests which have written to storage.",
                  "",
                  " If the `RequestCount` hits `MaxRequests`, no more calls will be allowed to the pallet until",
                  " the request capacity is increased.",
                  "",
                  " The `RequestCount` is decreased by one at the beginning of every block. This is to ensure",
                  " that the pallet can always make progress."
                ]
              },
              {
                "name": "InitialHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the header used to bootstrap the pallet."
                ]
              },
              {
                "name": "BestFinalized",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the best finalized header."
                ]
              },
              {
                "name": "ImportedHashes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A ring buffer of imported hashes. Ordered by the insertion time."
                ]
              },
              {
                "name": "ImportedHashesPointer",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current ring buffer position."
                ]
              },
              {
                "name": "ImportedHeaders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 178
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Headers which have been imported into the pallet."
                ]
              },
              {
                "name": "CurrentAuthoritySet",
                "modifier": "Default",
                "type": {
                  "plain": 598
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The current GRANDPA Authority set."
                ]
              },
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "IsHalted",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " If true, all pallet transactions are failed immediately."
                ]
              }
            ]
          },
          "calls": {
            "type": 486
          },
          "events": null,
          "constants": [
            {
              "name": "MaxRequests",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The upper bound on the number of requests allowed by the pallet.",
                "",
                " A request refers to an action which writes a header to storage.",
                "",
                " Once this bound is reached the pallet will not allow any dispatchables to be called",
                " until the request count has decreased."
              ]
            },
            {
              "name": "HeadersToKeep",
              "type": 4,
              "value": "0x70170000",
              "docs": [
                " Maximal number of finalized headers to keep in the storage.",
                "",
                " The setting is there to prevent growing the on-chain state indefinitely. Note",
                " the setting does not relate to block numbers - we will simply keep as much items",
                " in the storage, so it doesn't guarantee any fixed timeframe for finality headers."
              ]
            }
          ],
          "errors": {
            "type": 599
          },
          "index": 43
        },
        {
          "name": "BridgeCrabMessages",
          "storage": {
            "prefix": "BridgeCrabMessages",
            "items": [
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "plain": 493
                },
                "fallback": "0x00",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, some, or no transactions will be allowed."
                ]
              },
              {
                "name": "InboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 600
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " Map of lane id => inbound lane data."
                ]
              },
              {
                "name": "OutboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 603
                  }
                },
                "fallback": "0x010000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of lane id => outbound lane data."
                ]
              },
              {
                "name": "OutboundMessages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 604,
                    "value": 605
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All queued outbound messages."
                ]
              }
            ]
          },
          "calls": {
            "type": 492
          },
          "events": {
            "type": 117
          },
          "constants": [
            {
              "name": "BridgedChainId",
              "type": 14,
              "value": "0x63726162",
              "docs": [
                " Gets the chain id value from the instance."
              ]
            }
          ],
          "errors": {
            "type": 606
          },
          "index": 44
        },
        {
          "name": "FeeMarket",
          "storage": {
            "prefix": "FeeMarket",
            "items": [
              {
                "name": "RelayersMap",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 607
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "Relayers",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayers",
                "modifier": "Optional",
                "type": {
                  "plain": 608
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Orders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 113,
                    "value": 609
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "CollateralSlashProtect",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayersNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x03000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 504
          },
          "events": {
            "type": 123
          },
          "constants": [
            {
              "name": "TreasuryPalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " Some reward goes to Treasury."
              ]
            },
            {
              "name": "LockId",
              "type": 162,
              "value": "0x64612f6665656c66",
              "docs": [

              ]
            },
            {
              "name": "MinimumRelayFee",
              "type": 6,
              "value": "0x00d6117e030000000000000000000000",
              "docs": [
                " The minimum fee for relaying."
              ]
            },
            {
              "name": "CollateralPerOrder",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [
                " The collateral relayer need to lock for each order.",
                "",
                " This also represents the maximum slash value for a single delayed order.",
                " Please note that if this value is set to zero the fee market will be suspended."
              ]
            },
            {
              "name": "Slot",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " The slot times set"
              ]
            },
            {
              "name": "GuardRelayersRewardRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [
                " Reward parameters"
              ]
            },
            {
              "name": "MessageRelayersRewardRatio",
              "type": 142,
              "value": "0x00350c00",
              "docs": [

              ]
            },
            {
              "name": "ConfirmRelayersRewardRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [

              ]
            },
            {
              "name": "AssignedRelayerSlashRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [
                " The slash ratio for assigned relayers."
              ]
            }
          ],
          "errors": {
            "type": 613
          },
          "index": 45
        },
        {
          "name": "ToCrabBacking",
          "storage": {
            "prefix": "ToCrabBacking",
            "items": [
              {
                "name": "SecureLimitedPeriod",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Period between security limitation. Zero means there is no period limitation."
                ]
              },
              {
                "name": "SecureLimitedRingAmount",
                "modifier": "Default",
                "type": {
                  "plain": 614
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " `(Spent, Maximum)` amount of *RING* security limitation each [`LimitedPeriod`]."
                ]
              },
              {
                "name": "TransactionInfos",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 113,
                    "value": 73
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " `(sender, amount)` the user *sender* lock and remote issuing amount of asset"
                ]
              },
              {
                "name": "RemoteMappingTokenFactoryAccount",
                "modifier": "Default",
                "type": {
                  "plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The remote mapping token factory account, here use to ensure the remote caller"
                ]
              }
            ]
          },
          "calls": {
            "type": 505
          },
          "events": {
            "type": 129
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f746372626b",
              "docs": [
                " The pallet id of this pallet"
              ]
            },
            {
              "name": "RingMetadata",
              "type": 130,
              "value": "0x000000006d6f646c64612f6272696e6700000000000000007444617277696e6961204e6574776f726b204e617469766520546f6b656e1052494e4709",
              "docs": [
                " The local ring metadata"
              ]
            },
            {
              "name": "MaxLockRingAmountPerTx",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": [
                " The max lock amount per transaction for security."
              ]
            }
          ],
          "errors": {
            "type": 615
          },
          "index": 46
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 58,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 616,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 506
          },
          "events": {
            "type": 131
          },
          "constants": [

          ],
          "errors": {
            "type": 617
          },
          "index": 47
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "plain": 618
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "plain": 625
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "plain": 630
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "plain": 631
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "RemainingRingBalance",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining ring balance for dvm account."
                ]
              },
              {
                "name": "RemainingKtonBalance",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining kton balance for dvm account."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 98,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Mapping for block number and hashes."
                ]
              }
            ]
          },
          "calls": {
            "type": 509
          },
          "events": {
            "type": 133
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x6461722f64766d70",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 632
          },
          "index": 48
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "items": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "type": {
                  "plain": 98
                },
                "fallback": "0x00ca9a3b00000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "IsActive",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x01",
                "docs": [

                ]
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "type": {
                  "plain": 142
                },
                "fallback": "0x48e80100",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 519
          },
          "events": {
            "type": 141
          },
          "constants": [

          ],
          "errors": null,
          "index": 49
        }
      ],
      "extrinsic": {
        "type": 633,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 635,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 636,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 637,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 638,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 640,
            "additionalSigned": 68
          },
          {
            "identifier": "CheckWeight",
            "type": 641,
            "additionalSigned": 68
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 642,
            "additionalSigned": 68
          },
          {
            "identifier": "CheckEthereumRelayHeaderParcel",
            "type": 643,
            "additionalSigned": 68
          }
        ]
      },
      "type": 644
    }
  }
}
